
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000c98  00000d2c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c98  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000c9  0080014a  0080014a  00000d76  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d76  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000190  00000000  00000000  00000e14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001482  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c75  00000000  00000000  00002426  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0f  00000000  00000000  0000309b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003bac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000643  00000000  00000000  00003f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f8  00000000  00000000  000045a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00004b9b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 98 02 	jmp	0x530	; 0x530 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_18>
  4c:	0c 94 10 03 	jmp	0x620	; 0x620 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e9       	ldi	r30, 0x98	; 152
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a3 31       	cpi	r26, 0x13	; 19
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_start>:
static char mensaje[50];
static char humedad[50];
static char temperatura[50];

static void DHT11_start(){
	DDRC |= (1 << PINC0);    // Configurar el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PINC0);  // Enviar señal de start al DHT11
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_start+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_start+0x1c>
  c2:	00 00       	nop
	_delay_ms(20);            // Esperar al menos 20 ms
	PORTC |= (1 << PINC0);  // dht high
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0);   // Configurar el pin como entrada, sube automaticamente e valor a 1
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	87 b9       	out	0x07, r24	; 7
	while (  PINC & (1 << PINC0) ); //Espero hasta que el DHT11 envie señal de respuesta en 0
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <DHT11_start+0x2a>
	while ((PINC & (1 << PINC0)) == 0); //DHT11 envia señal en bajo, aproximadamente durante 80us, espero hasta que envie señal en alto
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <DHT11_start+0x2e>
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
  d8:	30 99       	sbic	0x06, 0	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <DHT11_start+0x32>
}
  dc:	08 95       	ret

000000de <Leer8Bits>:

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
	for (int i = 0; i < 8; i++)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
	while ((PINC & (1 << PINC0)) == 0); //DHT11 envia señal en bajo, aproximadamente durante 80us, espero hasta que envie señal en alto
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
}

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < 8; i++)
  e4:	11 c0       	rjmp	.+34     	; 0x108 <Leer8Bits+0x2a>
	{
		while ((PINC & (1 << PINC0)) == 0);
  e6:	30 9b       	sbis	0x06, 0	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <Leer8Bits+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	90 ea       	ldi	r25, 0xA0	; 160
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <Leer8Bits+0xe>
		_delay_us(30); //Espero 29 us, un microsegundo mas de lo que puede durar una seña en bajo
		if (PINC & (1 << PINC0)){ //verifico si  sigue en alto
  f0:	30 9b       	sbis	0x06, 0	; 6
  f2:	05 c0       	rjmp	.+10     	; 0xfe <Leer8Bits+0x20>
			
			byte = ((byte << 1) | 1); // si sigue en alto quiere decir que es un 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <Leer8Bits+0x22>
		}
		else
		{
			byte = ((byte << 1) | 0); // si no es un 0
  fe:	88 0f       	add	r24, r24
		}
		while ((PINC & (1 << PINC0)) != 0); // espero al proximo bit, aproximadamente 50us
 100:	30 99       	sbic	0x06, 0	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <Leer8Bits+0x22>
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
}

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
	for (int i = 0; i < 8; i++)
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	28 30       	cpi	r18, 0x08	; 8
 10a:	31 05       	cpc	r19, r1
 10c:	64 f3       	brlt	.-40     	; 0xe6 <Leer8Bits+0x8>
			byte = ((byte << 1) | 0); // si no es un 0
		}
		while ((PINC & (1 << PINC0)) != 0); // espero al proximo bit, aproximadamente 50us
	}
	return byte;
}
 10e:	08 95       	ret

00000110 <leerTemperatura>:

static uint8_t leerTemperatura(char *humedad, char *temperatura){
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	18 2f       	mov	r17, r24
 11e:	09 2f       	mov	r16, r25
 120:	f6 2e       	mov	r15, r22
 122:	e7 2e       	mov	r14, r23
	uint8_t checksum = 0;
	cli();
 124:	f8 94       	cli
	DHT11_start();
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_start>
	datos[0] = Leer8Bits(); // Humedad parte entera
 12a:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 12e:	c0 ee       	ldi	r28, 0xE0	; 224
 130:	d1 e0       	ldi	r29, 0x01	; 1
 132:	88 83       	st	Y, r24
	datos[1] = Leer8Bits(); // Humedad parte decimal
 134:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 138:	89 83       	std	Y+1, r24	; 0x01
	datos[2] = Leer8Bits(); // Temperatura parte entera
 13a:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 13e:	8a 83       	std	Y+2, r24	; 0x02
	datos[3] = Leer8Bits(); // Temperatura parte decimal
 140:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 144:	8b 83       	std	Y+3, r24	; 0x03
	datos[4] = Leer8Bits(); // checksum
 146:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 14a:	8c 83       	std	Y+4, r24	; 0x04
	checksum = datos[0] + datos[1] + datos[2] + datos[3]; // suma los datos en una variable para comparar e dato de checksum
 14c:	38 81       	ld	r19, Y
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	2a 81       	ldd	r18, Y+2	; 0x02
 152:	9b 81       	ldd	r25, Y+3	; 0x03
 154:	83 0f       	add	r24, r19
 156:	82 0f       	add	r24, r18
 158:	89 0f       	add	r24, r25
	
	DDRC |= 1 <<  PINC0;
 15a:	97 b1       	in	r25, 0x07	; 7
 15c:	91 60       	ori	r25, 0x01	; 1
 15e:	97 b9       	out	0x07, r25	; 7
	PORTC |= 1 <<  PINC0;
 160:	98 b1       	in	r25, 0x08	; 8
 162:	91 60       	ori	r25, 0x01	; 1
 164:	98 b9       	out	0x08, r25	; 8
	
	sei();
 166:	78 94       	sei
	
	if (checksum == datos[4]){
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	89 13       	cpse	r24, r25
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <leerTemperatura+0x9e>
		sprintf(temperatura, "TEMP: %2dC", datos[2]);
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	1f 92       	push	r1
 172:	8f 93       	push	r24
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9f 93       	push	r25
 17a:	8f 93       	push	r24
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sprintf>
		sprintf(humedad, "HUM: %2d", datos[0]);
 184:	88 81       	ld	r24, Y
 186:	1f 92       	push	r1
 188:	8f 93       	push	r24
 18a:	8c e0       	ldi	r24, 0x0C	; 12
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sprintf>
		return 1;
 19a:	8d b7       	in	r24, 0x3d	; 61
 19c:	9e b7       	in	r25, 0x3e	; 62
 19e:	0c 96       	adiw	r24, 0x0c	; 12
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	9e bf       	out	0x3e, r25	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	8d bf       	out	0x3d, r24	; 61
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <leerTemperatura+0xa0>
	}
	else
	{
		return 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	08 95       	ret

000001be <DHT11_enviarInformacion>:

char *DHT11_enviarInformacion(){
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	leerTemperatura(humedad, temperatura);
 1c6:	6a e4       	ldi	r22, 0x4A	; 74
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	8c e7       	ldi	r24, 0x7C	; 124
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <leerTemperatura>
	strcpy(mensaje, humedad);
 1d2:	6c e7       	ldi	r22, 0x7C	; 124
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	8e ea       	ldi	r24, 0xAE	; 174
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 59 03 	call	0x6b2	; 0x6b2 <strcpy>
	strcat(mensaje, " ");
 1de:	ce ea       	ldi	r28, 0xAE	; 174
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	fe 01       	movw	r30, r28
 1e4:	01 90       	ld	r0, Z+
 1e6:	00 20       	and	r0, r0
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <DHT11_enviarInformacion+0x26>
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	00 e2       	ldi	r16, 0x20	; 32
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	11 83       	std	Z+1, r17	; 0x01
 1f2:	00 83       	st	Z, r16
	strcat(mensaje, temperatura);
 1f4:	6a e4       	ldi	r22, 0x4A	; 74
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 4e 03 	call	0x69c	; 0x69c <strcat>
	strcat(mensaje, " ");
 1fe:	09 90       	ld	r0, Y+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <DHT11_enviarInformacion+0x40>
 204:	21 97       	sbiw	r28, 0x01	; 1
 206:	19 83       	std	Y+1, r17	; 0x01
 208:	08 83       	st	Y, r16
	return mensaje;
 20a:	8e ea       	ldi	r24, 0xAE	; 174
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <i2c_init>:

#include "i2c.h"

void i2c_init() {
	// Configurar el registro TWBR para la frecuencia SCL
	TWBR = (uint8_t)(((F_CPU / SCL_CLOCK) - 16) / 2);
 218:	88 e4       	ldi	r24, 0x48	; 72
 21a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0; // Preescaler a 1
 21e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 222:	08 95       	ret

00000224 <i2c_start>:
}

void i2c_start() {
	// Enviar condición de START
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 224:	84 ea       	ldi	r24, 0xA4	; 164
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 22a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22e:	88 23       	and	r24, r24
 230:	e4 f7       	brge	.-8      	; 0x22a <i2c_start+0x6>
}
 232:	08 95       	ret

00000234 <i2c_stop>:

void i2c_stop() {
	// Enviar condición de STOP
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 234:	84 e9       	ldi	r24, 0x94	; 148
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	08 95       	ret

0000023c <i2c_write>:
}

void i2c_write(uint8_t data) {
	TWDR = data; // Cargar dato en el registro TWDR
 23c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Iniciar transmisión
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	88 23       	and	r24, r24
 24c:	e4 f7       	brge	.-8      	; 0x246 <i2c_write+0xa>
}
 24e:	08 95       	ret

00000250 <i2c_read>:

uint8_t i2c_read(uint8_t ack) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA); // Configurar ACK
 250:	20 e4       	ldi	r18, 0x40	; 64
 252:	82 9f       	mul	r24, r18
 254:	c0 01       	movw	r24, r0
 256:	11 24       	eor	r1, r1
 258:	84 68       	ori	r24, 0x84	; 132
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 25e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 262:	88 23       	and	r24, r24
 264:	e4 f7       	brge	.-8      	; 0x25e <i2c_read+0xe>
	return TWDR; // Devolver el dato recibido
 266:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26a:	08 95       	ret

0000026c <main>:
#include "uart.h"
#include "timer.h"
#include "dht11.h"

int main(void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	e6 97       	sbiw	r28, 0x36	; 54
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
	UART_Init(); // Inicializa el UART
 280:	0e 94 c2 02 	call	0x584	; 0x584 <UART_Init>
	rtc_init();	 // Inicializa el RTC
 284:	0e 94 2e 02 	call	0x45c	; 0x45c <rtc_init>
	TIMER_init(); // Inicializa el Timer
 288:	0e 94 73 02 	call	0x4e6	; 0x4e6 <TIMER_init>
	TIMER_Enable();
 28c:	0e 94 82 02 	call	0x504	; 0x504 <TIMER_Enable>

	sei();
 290:	78 94       	sei
	while (1)
	{

		if (TIMER_GetClkFlag())
 292:	0e 94 92 02 	call	0x524	; 0x524 <TIMER_GetClkFlag>
 296:	88 23       	and	r24, r24
 298:	e1 f3       	breq	.-8      	; 0x292 <main+0x26>
		{
			TIMER_ClearClkFlag();
 29a:	0e 94 95 02 	call	0x52a	; 0x52a <TIMER_ClearClkFlag>
			char buffer[54]; // Buffer para almacenar el mensaje
			strcpy(buffer, DHT11_enviarInformacion());
 29e:	0e 94 df 00 	call	0x1be	; 0x1be <DHT11_enviarInformacion>
 2a2:	bc 01       	movw	r22, r24
 2a4:	ce 01       	movw	r24, r28
 2a6:	01 96       	adiw	r24, 0x01	; 1
 2a8:	0e 94 59 03 	call	0x6b2	; 0x6b2 <strcpy>
			strcat(buffer, RTC_enviarInformacion());
 2ac:	0e 94 41 02 	call	0x482	; 0x482 <RTC_enviarInformacion>
 2b0:	bc 01       	movw	r22, r24
 2b2:	ce 01       	movw	r24, r28
 2b4:	01 96       	adiw	r24, 0x01	; 1
 2b6:	0e 94 4e 03 	call	0x69c	; 0x69c <strcat>
			UART_SendMsg(buffer); // EnvÃ­a la cadena por UART
 2ba:	ce 01       	movw	r24, r28
 2bc:	01 96       	adiw	r24, 0x01	; 1
 2be:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <UART_SendMsg>
 2c2:	e7 cf       	rjmp	.-50     	; 0x292 <main+0x26>

000002c4 <bcd_to_dec>:
};

static char time[33];

static uint8_t bcd_to_dec(uint8_t bcd) {
	return ((bcd / 16) * 10) + (bcd % 16);
 2c4:	98 2f       	mov	r25, r24
 2c6:	92 95       	swap	r25
 2c8:	9f 70       	andi	r25, 0x0F	; 15
 2ca:	99 0f       	add	r25, r25
 2cc:	29 2f       	mov	r18, r25
 2ce:	22 0f       	add	r18, r18
 2d0:	22 0f       	add	r18, r18
 2d2:	92 0f       	add	r25, r18
 2d4:	8f 70       	andi	r24, 0x0F	; 15
}
 2d6:	89 0f       	add	r24, r25
 2d8:	08 95       	ret

000002da <dec_to_bcd>:

static uint8_t dec_to_bcd(uint8_t val) {
	return (val / 10 * 16) + (val % 10);
 2da:	9d ec       	ldi	r25, 0xCD	; 205
 2dc:	89 9f       	mul	r24, r25
 2de:	91 2d       	mov	r25, r1
 2e0:	11 24       	eor	r1, r1
 2e2:	96 95       	lsr	r25
 2e4:	96 95       	lsr	r25
 2e6:	96 95       	lsr	r25
 2e8:	39 2f       	mov	r19, r25
 2ea:	33 0f       	add	r19, r19
 2ec:	23 2f       	mov	r18, r19
 2ee:	22 0f       	add	r18, r18
 2f0:	22 0f       	add	r18, r18
 2f2:	23 0f       	add	r18, r19
 2f4:	82 1b       	sub	r24, r18
}
 2f6:	20 e1       	ldi	r18, 0x10	; 16
 2f8:	92 9f       	mul	r25, r18
 2fa:	80 0d       	add	r24, r0
 2fc:	11 24       	eor	r1, r1
 2fe:	08 95       	ret

00000300 <rtc_set_time>:

	i2c_stop(); // Enviar condición de STOP
	return current;
}

static void rtc_set_time(RTC_Time time) {
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	cd b7       	in	r28, 0x3d	; 61
 306:	de b7       	in	r29, 0x3e	; 62
 308:	27 97       	sbiw	r28, 0x07	; 7
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	29 83       	std	Y+1, r18	; 0x01
 316:	3a 83       	std	Y+2, r19	; 0x02
 318:	4b 83       	std	Y+3, r20	; 0x03
 31a:	5c 83       	std	Y+4, r21	; 0x04
 31c:	6d 83       	std	Y+5, r22	; 0x05
 31e:	7e 83       	std	Y+6, r23	; 0x06
 320:	8f 83       	std	Y+7, r24	; 0x07
	i2c_start();
 322:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_WRITE);
 326:	80 ed       	ldi	r24, 0xD0	; 208
 328:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(0x00);  // Establecer el puntero de registro en segundos
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	i2c_write(dec_to_bcd(time.seconds));
 332:	89 81       	ldd	r24, Y+1	; 0x01
 334:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 338:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.minutes));
 33c:	8a 81       	ldd	r24, Y+2	; 0x02
 33e:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 342:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.hours));
 346:	8b 81       	ldd	r24, Y+3	; 0x03
 348:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 34c:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.day));
 350:	8c 81       	ldd	r24, Y+4	; 0x04
 352:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 356:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.date));
 35a:	8d 81       	ldd	r24, Y+5	; 0x05
 35c:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 360:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.month));
 364:	8e 81       	ldd	r24, Y+6	; 0x06
 366:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 36a:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.year % 100));  // Solo dos dígitos para el año
 36e:	8f 81       	ldd	r24, Y+7	; 0x07
 370:	99 e2       	ldi	r25, 0x29	; 41
 372:	89 9f       	mul	r24, r25
 374:	91 2d       	mov	r25, r1
 376:	11 24       	eor	r1, r1
 378:	92 95       	swap	r25
 37a:	9f 70       	andi	r25, 0x0F	; 15
 37c:	24 e6       	ldi	r18, 0x64	; 100
 37e:	92 9f       	mul	r25, r18
 380:	80 19       	sub	r24, r0
 382:	11 24       	eor	r1, r1
 384:	0e 94 6d 01 	call	0x2da	; 0x2da <dec_to_bcd>
 388:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	i2c_stop();
 38c:	0e 94 1a 01 	call	0x234	; 0x234 <i2c_stop>
}
 390:	27 96       	adiw	r28, 0x07	; 7
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	08 95       	ret

000003a2 <rtc_get_time>:

static uint8_t dec_to_bcd(uint8_t val) {
	return (val / 10 * 16) + (val % 10);
}

static RTC_Time rtc_get_time() {
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	2e 97       	sbiw	r28, 0x0e	; 14
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
	RTC_Time current;
	i2c_start();
 3b6:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_WRITE); // Dirección de DS3231 + bit de escritura
 3ba:	80 ed       	ldi	r24, 0xD0	; 208
 3bc:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(0x00); // Establecer el registro de segundos como dirección inicial
 3c0:	80 e0       	ldi	r24, 0x00	; 0
 3c2:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_start();
 3c6:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_READ); // Dirección de DS3231 + bit de lectura
 3ca:	81 ed       	ldi	r24, 0xD1	; 209
 3cc:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	current.seconds = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 3d6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 3da:	88 87       	std	Y+8, r24	; 0x08
	current.minutes = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 3dc:	81 e0       	ldi	r24, 0x01	; 1
 3de:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 3e2:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 3e6:	89 87       	std	Y+9, r24	; 0x09
	current.hours = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 3e8:	81 e0       	ldi	r24, 0x01	; 1
 3ea:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 3ee:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 3f2:	8a 87       	std	Y+10, r24	; 0x0a
	current.day = bcd_to_dec(i2c_read(1));     // Leer y enviar ACK
 3f4:	81 e0       	ldi	r24, 0x01	; 1
 3f6:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 3fa:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 3fe:	8b 87       	std	Y+11, r24	; 0x0b
	current.date = bcd_to_dec(i2c_read(1));    // Leer y enviar ACK
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 406:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 40a:	8c 87       	std	Y+12, r24	; 0x0c
	current.month = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 412:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 416:	8d 87       	std	Y+13, r24	; 0x0d
	current.year = bcd_to_dec(i2c_read(0));    // Leer y enviar NACK
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 41e:	0e 94 62 01 	call	0x2c4	; 0x2c4 <bcd_to_dec>
 422:	8e 87       	std	Y+14, r24	; 0x0e

	i2c_stop(); // Enviar condición de STOP
 424:	0e 94 1a 01 	call	0x234	; 0x234 <i2c_stop>
	return current;
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	fe 01       	movw	r30, r28
 42c:	38 96       	adiw	r30, 0x08	; 8
 42e:	de 01       	movw	r26, r28
 430:	11 96       	adiw	r26, 0x01	; 1
 432:	01 90       	ld	r0, Z+
 434:	0d 92       	st	X+, r0
 436:	8a 95       	dec	r24
 438:	e1 f7       	brne	.-8      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 43a:	29 81       	ldd	r18, Y+1	; 0x01
 43c:	3a 81       	ldd	r19, Y+2	; 0x02
 43e:	4b 81       	ldd	r20, Y+3	; 0x03
 440:	5c 81       	ldd	r21, Y+4	; 0x04
 442:	6d 81       	ldd	r22, Y+5	; 0x05
 444:	7e 81       	ldd	r23, Y+6	; 0x06
}
 446:	8f 81       	ldd	r24, Y+7	; 0x07
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	2e 96       	adiw	r28, 0x0e	; 14
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	08 95       	ret

0000045c <rtc_init>:

	i2c_stop();
}

void rtc_init() {
	i2c_init(); // Asegura que I2C está inicializado
 45c:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_init>
	rtc_set_time(now);
 460:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <now>
 464:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <now+0x1>
 468:	40 91 44 01 	lds	r20, 0x0144	; 0x800144 <now+0x2>
 46c:	50 91 45 01 	lds	r21, 0x0145	; 0x800145 <now+0x3>
 470:	60 91 46 01 	lds	r22, 0x0146	; 0x800146 <now+0x4>
 474:	70 91 47 01 	lds	r23, 0x0147	; 0x800147 <now+0x5>
 478:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <now+0x6>
 47c:	0e 94 80 01 	call	0x300	; 0x300 <rtc_set_time>
 480:	08 95       	ret

00000482 <RTC_enviarInformacion>:
}

char *RTC_enviarInformacion(){
 482:	cf 93       	push	r28
 484:	df 93       	push	r29
 486:	cd b7       	in	r28, 0x3d	; 61
 488:	de b7       	in	r29, 0x3e	; 62
 48a:	27 97       	sbiw	r28, 0x07	; 7
 48c:	0f b6       	in	r0, 0x3f	; 63
 48e:	f8 94       	cli
 490:	de bf       	out	0x3e, r29	; 62
 492:	0f be       	out	0x3f, r0	; 63
 494:	cd bf       	out	0x3d, r28	; 61
	RTC_Time current = rtc_get_time();
 496:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <rtc_get_time>
	
	sprintf(time, "FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n", current.date, current.month, current.year,current.hours, current.minutes, current.seconds);
 49a:	1f 92       	push	r1
 49c:	2f 93       	push	r18
 49e:	1f 92       	push	r1
 4a0:	3f 93       	push	r19
 4a2:	1f 92       	push	r1
 4a4:	4f 93       	push	r20
 4a6:	1f 92       	push	r1
 4a8:	8f 93       	push	r24
 4aa:	1f 92       	push	r1
 4ac:	7f 93       	push	r23
 4ae:	1f 92       	push	r1
 4b0:	6f 93       	push	r22
 4b2:	85 e1       	ldi	r24, 0x15	; 21
 4b4:	91 e0       	ldi	r25, 0x01	; 1
 4b6:	9f 93       	push	r25
 4b8:	8f 93       	push	r24
 4ba:	85 ee       	ldi	r24, 0xE5	; 229
 4bc:	91 e0       	ldi	r25, 0x01	; 1
 4be:	9f 93       	push	r25
 4c0:	8f 93       	push	r24
 4c2:	0e 94 60 03 	call	0x6c0	; 0x6c0 <sprintf>
	return time;
 4c6:	0f b6       	in	r0, 0x3f	; 63
 4c8:	f8 94       	cli
 4ca:	de bf       	out	0x3e, r29	; 62
 4cc:	0f be       	out	0x3f, r0	; 63
 4ce:	cd bf       	out	0x3d, r28	; 61
}
 4d0:	85 ee       	ldi	r24, 0xE5	; 229
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	27 96       	adiw	r28, 0x07	; 7
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	de bf       	out	0x3e, r29	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	cd bf       	out	0x3d, r28	; 61
 4e0:	df 91       	pop	r29
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <TIMER_init>:
	flagClk = 0;
}

void TIMER_ClearCount()
{
	count = 0;
 4e6:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 4ea:	e1 e8       	ldi	r30, 0x81	; 129
 4ec:	f0 e0       	ldi	r31, 0x00	; 0
 4ee:	10 82       	st	Z, r1
 4f0:	80 81       	ld	r24, Z
 4f2:	8b 60       	ori	r24, 0x0B	; 11
 4f4:	80 83       	st	Z, r24
 4f6:	88 ea       	ldi	r24, 0xA8	; 168
 4f8:	91 e6       	ldi	r25, 0x61	; 97
 4fa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4fe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 502:	08 95       	ret

00000504 <TIMER_Enable>:
 504:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 508:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 50c:	ef e6       	ldi	r30, 0x6F	; 111
 50e:	f0 e0       	ldi	r31, 0x00	; 0
 510:	80 81       	ld	r24, Z
 512:	82 60       	ori	r24, 0x02	; 2
 514:	80 83       	st	Z, r24
 516:	08 95       	ret

00000518 <TIMER_Disable>:
 518:	ef e6       	ldi	r30, 0x6F	; 111
 51a:	f0 e0       	ldi	r31, 0x00	; 0
 51c:	80 81       	ld	r24, Z
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	80 83       	st	Z, r24
 522:	08 95       	ret

00000524 <TIMER_GetClkFlag>:
 524:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <flagClk>
 528:	08 95       	ret

0000052a <TIMER_ClearClkFlag>:
 52a:	10 92 07 02 	sts	0x0207, r1	; 0x800207 <flagClk>
 52e:	08 95       	ret

00000530 <__vector_11>:
}

// Rutina de servicio para el timer que se activa "On Compare Match", definido en el timer a 100ms
ISR(TIMER1_COMPA_vect)
{
 530:	1f 92       	push	r1
 532:	0f 92       	push	r0
 534:	0f b6       	in	r0, 0x3f	; 63
 536:	0f 92       	push	r0
 538:	11 24       	eor	r1, r1
 53a:	8f 93       	push	r24
	count++;
 53c:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <count>
 540:	8f 5f       	subi	r24, 0xFF	; 255
 542:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <count>
	// 1 segundo
	if (count == 20)
 546:	84 31       	cpi	r24, 0x14	; 20
 548:	29 f4       	brne	.+10     	; 0x554 <__vector_11+0x24>
	{
		count = 0;
 54a:	10 92 06 02 	sts	0x0206, r1	; 0x800206 <count>
		flagClk = 1;
 54e:	81 e0       	ldi	r24, 0x01	; 1
 550:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <flagClk>
	}
}
 554:	8f 91       	pop	r24
 556:	0f 90       	pop	r0
 558:	0f be       	out	0x3f, r0	; 63
 55a:	0f 90       	pop	r0
 55c:	1f 90       	pop	r1
 55e:	18 95       	reti

00000560 <UART_Enable_Rx>:
 * Lee el buffer de la UART
 */
char *UART_ReadBuffer()
{
	return buffer_rx;
}
 560:	e1 ec       	ldi	r30, 0xC1	; 193
 562:	f0 e0       	ldi	r31, 0x00	; 0
 564:	80 81       	ld	r24, Z
 566:	80 68       	ori	r24, 0x80	; 128
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret

0000056c <UART_Disable_Tx>:
 56c:	e1 ec       	ldi	r30, 0xC1	; 193
 56e:	f0 e0       	ldi	r31, 0x00	; 0
 570:	80 81       	ld	r24, Z
 572:	8f 7d       	andi	r24, 0xDF	; 223
 574:	80 83       	st	Z, r24
 576:	08 95       	ret

00000578 <UART_Enable_Tx>:
 578:	e1 ec       	ldi	r30, 0xC1	; 193
 57a:	f0 e0       	ldi	r31, 0x00	; 0
 57c:	80 81       	ld	r24, Z
 57e:	80 62       	ori	r24, 0x20	; 32
 580:	80 83       	st	Z, r24
 582:	08 95       	ret

00000584 <UART_Init>:
 584:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 588:	87 e6       	ldi	r24, 0x67	; 103
 58a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 58e:	86 e0       	ldi	r24, 0x06	; 6
 590:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 594:	88 e1       	ldi	r24, 0x18	; 24
 596:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 59a:	0e 94 b0 02 	call	0x560	; 0x560 <UART_Enable_Rx>
 59e:	0e 94 bc 02 	call	0x578	; 0x578 <UART_Enable_Tx>
 5a2:	08 95       	ret

000005a4 <UART_SendMsg>:
 5a4:	bc 01       	movw	r22, r24
 5a6:	89 e0       	ldi	r24, 0x09	; 9
 5a8:	92 e0       	ldi	r25, 0x02	; 2
 5aa:	0e 94 59 03 	call	0x6b2	; 0x6b2 <strcpy>
 5ae:	0e 94 bc 02 	call	0x578	; 0x578 <UART_Enable_Tx>
 5b2:	08 95       	ret

000005b4 <__vector_18>:
/*
 * Interrupcion de recepcion
 * Disparada por la UART cuando el buffer esta listo para ser leido
 */
ISR(USART_RX_vect)
{
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	ef 93       	push	r30
 5d4:	ff 93       	push	r31
	char dato;

	dato = UDR0;
 5d6:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	if(dato == 's' || dato == 'S'){
 5da:	83 37       	cpi	r24, 0x73	; 115
 5dc:	11 f0       	breq	.+4      	; 0x5e2 <__vector_18+0x2e>
 5de:	83 35       	cpi	r24, 0x53	; 83
 5e0:	71 f4       	brne	.+28     	; 0x5fe <__vector_18+0x4a>
		if (cmd_flag){
 5e2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 5e6:	88 23       	and	r24, r24
 5e8:	29 f0       	breq	.+10     	; 0x5f4 <__vector_18+0x40>
			TIMER_Disable();
 5ea:	0e 94 8c 02 	call	0x518	; 0x518 <TIMER_Disable>
			cmd_flag = 0;
 5ee:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 5f2:	05 c0       	rjmp	.+10     	; 0x5fe <__vector_18+0x4a>
		}else{
			TIMER_Enable();
 5f4:	0e 94 82 02 	call	0x504	; 0x504 <TIMER_Enable>
			cmd_flag = 1;
 5f8:	81 e0       	ldi	r24, 0x01	; 1
 5fa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}

}
 5fe:	ff 91       	pop	r31
 600:	ef 91       	pop	r30
 602:	bf 91       	pop	r27
 604:	af 91       	pop	r26
 606:	9f 91       	pop	r25
 608:	8f 91       	pop	r24
 60a:	7f 91       	pop	r23
 60c:	6f 91       	pop	r22
 60e:	5f 91       	pop	r21
 610:	4f 91       	pop	r20
 612:	3f 91       	pop	r19
 614:	2f 91       	pop	r18
 616:	0f 90       	pop	r0
 618:	0f be       	out	0x3f, r0	; 63
 61a:	0f 90       	pop	r0
 61c:	1f 90       	pop	r1
 61e:	18 95       	reti

00000620 <__vector_19>:
This bit is set when the transmit buffer is empty, and cleared when the transmit buffer
contains data to be transmitted that has not yet been moved into the shift register.
* Cargo el caracter de mensaje a enviar hasta alcanzar el fin del mensaje
*/
ISR(USART_UDRE_vect)
{
 620:	1f 92       	push	r1
 622:	0f 92       	push	r0
 624:	0f b6       	in	r0, 0x3f	; 63
 626:	0f 92       	push	r0
 628:	11 24       	eor	r1, r1
 62a:	2f 93       	push	r18
 62c:	3f 93       	push	r19
 62e:	4f 93       	push	r20
 630:	5f 93       	push	r21
 632:	6f 93       	push	r22
 634:	7f 93       	push	r23
 636:	8f 93       	push	r24
 638:	9f 93       	push	r25
 63a:	af 93       	push	r26
 63c:	bf 93       	push	r27
 63e:	ef 93       	push	r30
 640:	ff 93       	push	r31
	cli();
 642:	f8 94       	cli
	static volatile uint8_t i = 0;
	if (buffer_tx[i] != '\0')
 644:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <i.2268>
 648:	f0 e0       	ldi	r31, 0x00	; 0
 64a:	e7 5f       	subi	r30, 0xF7	; 247
 64c:	fd 4f       	sbci	r31, 0xFD	; 253
 64e:	80 81       	ld	r24, Z
 650:	88 23       	and	r24, r24
 652:	71 f0       	breq	.+28     	; 0x670 <__vector_19+0x50>
	{
		UDR0 = buffer_tx[i];
 654:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <i.2268>
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	e7 5f       	subi	r30, 0xF7	; 247
 65c:	fd 4f       	sbci	r31, 0xFD	; 253
 65e:	80 81       	ld	r24, Z
 660:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		i++;
 664:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <i.2268>
 668:	8f 5f       	subi	r24, 0xFF	; 255
 66a:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <i.2268>
 66e:	04 c0       	rjmp	.+8      	; 0x678 <__vector_19+0x58>
	}
	else
	{
		i = 0;
 670:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <i.2268>
		// al no escribir el registro udr0 es necesario desactivar
		// las interrupciones para evitar que se produzca otra interrupcion
		UART_Disable_Tx();
 674:	0e 94 b6 02 	call	0x56c	; 0x56c <UART_Disable_Tx>
	}
	sei();
 678:	78 94       	sei
 67a:	ff 91       	pop	r31
 67c:	ef 91       	pop	r30
 67e:	bf 91       	pop	r27
 680:	af 91       	pop	r26
 682:	9f 91       	pop	r25
 684:	8f 91       	pop	r24
 686:	7f 91       	pop	r23
 688:	6f 91       	pop	r22
 68a:	5f 91       	pop	r21
 68c:	4f 91       	pop	r20
 68e:	3f 91       	pop	r19
 690:	2f 91       	pop	r18
 692:	0f 90       	pop	r0
 694:	0f be       	out	0x3f, r0	; 63
 696:	0f 90       	pop	r0
 698:	1f 90       	pop	r1
 69a:	18 95       	reti

0000069c <strcat>:
 69c:	fb 01       	movw	r30, r22
 69e:	dc 01       	movw	r26, r24
 6a0:	0d 90       	ld	r0, X+
 6a2:	00 20       	and	r0, r0
 6a4:	e9 f7       	brne	.-6      	; 0x6a0 <strcat+0x4>
 6a6:	11 97       	sbiw	r26, 0x01	; 1
 6a8:	01 90       	ld	r0, Z+
 6aa:	0d 92       	st	X+, r0
 6ac:	00 20       	and	r0, r0
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <strcat+0xc>
 6b0:	08 95       	ret

000006b2 <strcpy>:
 6b2:	fb 01       	movw	r30, r22
 6b4:	dc 01       	movw	r26, r24
 6b6:	01 90       	ld	r0, Z+
 6b8:	0d 92       	st	X+, r0
 6ba:	00 20       	and	r0, r0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <strcpy+0x4>
 6be:	08 95       	ret

000006c0 <sprintf>:
 6c0:	ae e0       	ldi	r26, 0x0E	; 14
 6c2:	b0 e0       	ldi	r27, 0x00	; 0
 6c4:	e6 e6       	ldi	r30, 0x66	; 102
 6c6:	f3 e0       	ldi	r31, 0x03	; 3
 6c8:	0c 94 21 06 	jmp	0xc42	; 0xc42 <__prologue_saves__+0x1c>
 6cc:	0d 89       	ldd	r16, Y+21	; 0x15
 6ce:	1e 89       	ldd	r17, Y+22	; 0x16
 6d0:	86 e0       	ldi	r24, 0x06	; 6
 6d2:	8c 83       	std	Y+4, r24	; 0x04
 6d4:	1a 83       	std	Y+2, r17	; 0x02
 6d6:	09 83       	std	Y+1, r16	; 0x01
 6d8:	8f ef       	ldi	r24, 0xFF	; 255
 6da:	9f e7       	ldi	r25, 0x7F	; 127
 6dc:	9e 83       	std	Y+6, r25	; 0x06
 6de:	8d 83       	std	Y+5, r24	; 0x05
 6e0:	ae 01       	movw	r20, r28
 6e2:	47 5e       	subi	r20, 0xE7	; 231
 6e4:	5f 4f       	sbci	r21, 0xFF	; 255
 6e6:	6f 89       	ldd	r22, Y+23	; 0x17
 6e8:	78 8d       	ldd	r23, Y+24	; 0x18
 6ea:	ce 01       	movw	r24, r28
 6ec:	01 96       	adiw	r24, 0x01	; 1
 6ee:	0e 94 82 03 	call	0x704	; 0x704 <vfprintf>
 6f2:	ef 81       	ldd	r30, Y+7	; 0x07
 6f4:	f8 85       	ldd	r31, Y+8	; 0x08
 6f6:	e0 0f       	add	r30, r16
 6f8:	f1 1f       	adc	r31, r17
 6fa:	10 82       	st	Z, r1
 6fc:	2e 96       	adiw	r28, 0x0e	; 14
 6fe:	e4 e0       	ldi	r30, 0x04	; 4
 700:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <__epilogue_restores__+0x1c>

00000704 <vfprintf>:
 704:	ab e0       	ldi	r26, 0x0B	; 11
 706:	b0 e0       	ldi	r27, 0x00	; 0
 708:	e8 e8       	ldi	r30, 0x88	; 136
 70a:	f3 e0       	ldi	r31, 0x03	; 3
 70c:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__prologue_saves__>
 710:	6c 01       	movw	r12, r24
 712:	7b 01       	movw	r14, r22
 714:	8a 01       	movw	r16, r20
 716:	fc 01       	movw	r30, r24
 718:	17 82       	std	Z+7, r1	; 0x07
 71a:	16 82       	std	Z+6, r1	; 0x06
 71c:	83 81       	ldd	r24, Z+3	; 0x03
 71e:	81 ff       	sbrs	r24, 1
 720:	cc c1       	rjmp	.+920    	; 0xaba <__stack+0x1bb>
 722:	ce 01       	movw	r24, r28
 724:	01 96       	adiw	r24, 0x01	; 1
 726:	3c 01       	movw	r6, r24
 728:	f6 01       	movw	r30, r12
 72a:	93 81       	ldd	r25, Z+3	; 0x03
 72c:	f7 01       	movw	r30, r14
 72e:	93 fd       	sbrc	r25, 3
 730:	85 91       	lpm	r24, Z+
 732:	93 ff       	sbrs	r25, 3
 734:	81 91       	ld	r24, Z+
 736:	7f 01       	movw	r14, r30
 738:	88 23       	and	r24, r24
 73a:	09 f4       	brne	.+2      	; 0x73e <vfprintf+0x3a>
 73c:	ba c1       	rjmp	.+884    	; 0xab2 <__stack+0x1b3>
 73e:	85 32       	cpi	r24, 0x25	; 37
 740:	39 f4       	brne	.+14     	; 0x750 <vfprintf+0x4c>
 742:	93 fd       	sbrc	r25, 3
 744:	85 91       	lpm	r24, Z+
 746:	93 ff       	sbrs	r25, 3
 748:	81 91       	ld	r24, Z+
 74a:	7f 01       	movw	r14, r30
 74c:	85 32       	cpi	r24, 0x25	; 37
 74e:	29 f4       	brne	.+10     	; 0x75a <vfprintf+0x56>
 750:	b6 01       	movw	r22, r12
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 758:	e7 cf       	rjmp	.-50     	; 0x728 <vfprintf+0x24>
 75a:	91 2c       	mov	r9, r1
 75c:	21 2c       	mov	r2, r1
 75e:	31 2c       	mov	r3, r1
 760:	ff e1       	ldi	r31, 0x1F	; 31
 762:	f3 15       	cp	r31, r3
 764:	d8 f0       	brcs	.+54     	; 0x79c <vfprintf+0x98>
 766:	8b 32       	cpi	r24, 0x2B	; 43
 768:	79 f0       	breq	.+30     	; 0x788 <vfprintf+0x84>
 76a:	38 f4       	brcc	.+14     	; 0x77a <vfprintf+0x76>
 76c:	80 32       	cpi	r24, 0x20	; 32
 76e:	79 f0       	breq	.+30     	; 0x78e <vfprintf+0x8a>
 770:	83 32       	cpi	r24, 0x23	; 35
 772:	a1 f4       	brne	.+40     	; 0x79c <vfprintf+0x98>
 774:	23 2d       	mov	r18, r3
 776:	20 61       	ori	r18, 0x10	; 16
 778:	1d c0       	rjmp	.+58     	; 0x7b4 <vfprintf+0xb0>
 77a:	8d 32       	cpi	r24, 0x2D	; 45
 77c:	61 f0       	breq	.+24     	; 0x796 <vfprintf+0x92>
 77e:	80 33       	cpi	r24, 0x30	; 48
 780:	69 f4       	brne	.+26     	; 0x79c <vfprintf+0x98>
 782:	23 2d       	mov	r18, r3
 784:	21 60       	ori	r18, 0x01	; 1
 786:	16 c0       	rjmp	.+44     	; 0x7b4 <vfprintf+0xb0>
 788:	83 2d       	mov	r24, r3
 78a:	82 60       	ori	r24, 0x02	; 2
 78c:	38 2e       	mov	r3, r24
 78e:	e3 2d       	mov	r30, r3
 790:	e4 60       	ori	r30, 0x04	; 4
 792:	3e 2e       	mov	r3, r30
 794:	2a c0       	rjmp	.+84     	; 0x7ea <vfprintf+0xe6>
 796:	f3 2d       	mov	r31, r3
 798:	f8 60       	ori	r31, 0x08	; 8
 79a:	1d c0       	rjmp	.+58     	; 0x7d6 <vfprintf+0xd2>
 79c:	37 fc       	sbrc	r3, 7
 79e:	2d c0       	rjmp	.+90     	; 0x7fa <vfprintf+0xf6>
 7a0:	20 ed       	ldi	r18, 0xD0	; 208
 7a2:	28 0f       	add	r18, r24
 7a4:	2a 30       	cpi	r18, 0x0A	; 10
 7a6:	40 f0       	brcs	.+16     	; 0x7b8 <vfprintf+0xb4>
 7a8:	8e 32       	cpi	r24, 0x2E	; 46
 7aa:	b9 f4       	brne	.+46     	; 0x7da <vfprintf+0xd6>
 7ac:	36 fc       	sbrc	r3, 6
 7ae:	81 c1       	rjmp	.+770    	; 0xab2 <__stack+0x1b3>
 7b0:	23 2d       	mov	r18, r3
 7b2:	20 64       	ori	r18, 0x40	; 64
 7b4:	32 2e       	mov	r3, r18
 7b6:	19 c0       	rjmp	.+50     	; 0x7ea <vfprintf+0xe6>
 7b8:	36 fe       	sbrs	r3, 6
 7ba:	06 c0       	rjmp	.+12     	; 0x7c8 <vfprintf+0xc4>
 7bc:	8a e0       	ldi	r24, 0x0A	; 10
 7be:	98 9e       	mul	r9, r24
 7c0:	20 0d       	add	r18, r0
 7c2:	11 24       	eor	r1, r1
 7c4:	92 2e       	mov	r9, r18
 7c6:	11 c0       	rjmp	.+34     	; 0x7ea <vfprintf+0xe6>
 7c8:	ea e0       	ldi	r30, 0x0A	; 10
 7ca:	2e 9e       	mul	r2, r30
 7cc:	20 0d       	add	r18, r0
 7ce:	11 24       	eor	r1, r1
 7d0:	22 2e       	mov	r2, r18
 7d2:	f3 2d       	mov	r31, r3
 7d4:	f0 62       	ori	r31, 0x20	; 32
 7d6:	3f 2e       	mov	r3, r31
 7d8:	08 c0       	rjmp	.+16     	; 0x7ea <vfprintf+0xe6>
 7da:	8c 36       	cpi	r24, 0x6C	; 108
 7dc:	21 f4       	brne	.+8      	; 0x7e6 <vfprintf+0xe2>
 7de:	83 2d       	mov	r24, r3
 7e0:	80 68       	ori	r24, 0x80	; 128
 7e2:	38 2e       	mov	r3, r24
 7e4:	02 c0       	rjmp	.+4      	; 0x7ea <vfprintf+0xe6>
 7e6:	88 36       	cpi	r24, 0x68	; 104
 7e8:	41 f4       	brne	.+16     	; 0x7fa <vfprintf+0xf6>
 7ea:	f7 01       	movw	r30, r14
 7ec:	93 fd       	sbrc	r25, 3
 7ee:	85 91       	lpm	r24, Z+
 7f0:	93 ff       	sbrs	r25, 3
 7f2:	81 91       	ld	r24, Z+
 7f4:	7f 01       	movw	r14, r30
 7f6:	81 11       	cpse	r24, r1
 7f8:	b3 cf       	rjmp	.-154    	; 0x760 <vfprintf+0x5c>
 7fa:	98 2f       	mov	r25, r24
 7fc:	9f 7d       	andi	r25, 0xDF	; 223
 7fe:	95 54       	subi	r25, 0x45	; 69
 800:	93 30       	cpi	r25, 0x03	; 3
 802:	28 f4       	brcc	.+10     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
 804:	0c 5f       	subi	r16, 0xFC	; 252
 806:	1f 4f       	sbci	r17, 0xFF	; 255
 808:	9f e3       	ldi	r25, 0x3F	; 63
 80a:	99 83       	std	Y+1, r25	; 0x01
 80c:	0d c0       	rjmp	.+26     	; 0x828 <__DATA_REGION_LENGTH__+0x28>
 80e:	83 36       	cpi	r24, 0x63	; 99
 810:	31 f0       	breq	.+12     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 812:	83 37       	cpi	r24, 0x73	; 115
 814:	71 f0       	breq	.+28     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 816:	83 35       	cpi	r24, 0x53	; 83
 818:	09 f0       	breq	.+2      	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
 81a:	59 c0       	rjmp	.+178    	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 81c:	21 c0       	rjmp	.+66     	; 0x860 <__DATA_REGION_LENGTH__+0x60>
 81e:	f8 01       	movw	r30, r16
 820:	80 81       	ld	r24, Z
 822:	89 83       	std	Y+1, r24	; 0x01
 824:	0e 5f       	subi	r16, 0xFE	; 254
 826:	1f 4f       	sbci	r17, 0xFF	; 255
 828:	88 24       	eor	r8, r8
 82a:	83 94       	inc	r8
 82c:	91 2c       	mov	r9, r1
 82e:	53 01       	movw	r10, r6
 830:	13 c0       	rjmp	.+38     	; 0x858 <__DATA_REGION_LENGTH__+0x58>
 832:	28 01       	movw	r4, r16
 834:	f2 e0       	ldi	r31, 0x02	; 2
 836:	4f 0e       	add	r4, r31
 838:	51 1c       	adc	r5, r1
 83a:	f8 01       	movw	r30, r16
 83c:	a0 80       	ld	r10, Z
 83e:	b1 80       	ldd	r11, Z+1	; 0x01
 840:	36 fe       	sbrs	r3, 6
 842:	03 c0       	rjmp	.+6      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 844:	69 2d       	mov	r22, r9
 846:	70 e0       	ldi	r23, 0x00	; 0
 848:	02 c0       	rjmp	.+4      	; 0x84e <__DATA_REGION_LENGTH__+0x4e>
 84a:	6f ef       	ldi	r22, 0xFF	; 255
 84c:	7f ef       	ldi	r23, 0xFF	; 255
 84e:	c5 01       	movw	r24, r10
 850:	0e 94 6e 05 	call	0xadc	; 0xadc <strnlen>
 854:	4c 01       	movw	r8, r24
 856:	82 01       	movw	r16, r4
 858:	f3 2d       	mov	r31, r3
 85a:	ff 77       	andi	r31, 0x7F	; 127
 85c:	3f 2e       	mov	r3, r31
 85e:	16 c0       	rjmp	.+44     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 860:	28 01       	movw	r4, r16
 862:	22 e0       	ldi	r18, 0x02	; 2
 864:	42 0e       	add	r4, r18
 866:	51 1c       	adc	r5, r1
 868:	f8 01       	movw	r30, r16
 86a:	a0 80       	ld	r10, Z
 86c:	b1 80       	ldd	r11, Z+1	; 0x01
 86e:	36 fe       	sbrs	r3, 6
 870:	03 c0       	rjmp	.+6      	; 0x878 <__DATA_REGION_LENGTH__+0x78>
 872:	69 2d       	mov	r22, r9
 874:	70 e0       	ldi	r23, 0x00	; 0
 876:	02 c0       	rjmp	.+4      	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
 878:	6f ef       	ldi	r22, 0xFF	; 255
 87a:	7f ef       	ldi	r23, 0xFF	; 255
 87c:	c5 01       	movw	r24, r10
 87e:	0e 94 63 05 	call	0xac6	; 0xac6 <strnlen_P>
 882:	4c 01       	movw	r8, r24
 884:	f3 2d       	mov	r31, r3
 886:	f0 68       	ori	r31, 0x80	; 128
 888:	3f 2e       	mov	r3, r31
 88a:	82 01       	movw	r16, r4
 88c:	33 fc       	sbrc	r3, 3
 88e:	1b c0       	rjmp	.+54     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 890:	82 2d       	mov	r24, r2
 892:	90 e0       	ldi	r25, 0x00	; 0
 894:	88 16       	cp	r8, r24
 896:	99 06       	cpc	r9, r25
 898:	b0 f4       	brcc	.+44     	; 0x8c6 <__DATA_REGION_LENGTH__+0xc6>
 89a:	b6 01       	movw	r22, r12
 89c:	80 e2       	ldi	r24, 0x20	; 32
 89e:	90 e0       	ldi	r25, 0x00	; 0
 8a0:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 8a4:	2a 94       	dec	r2
 8a6:	f4 cf       	rjmp	.-24     	; 0x890 <__DATA_REGION_LENGTH__+0x90>
 8a8:	f5 01       	movw	r30, r10
 8aa:	37 fc       	sbrc	r3, 7
 8ac:	85 91       	lpm	r24, Z+
 8ae:	37 fe       	sbrs	r3, 7
 8b0:	81 91       	ld	r24, Z+
 8b2:	5f 01       	movw	r10, r30
 8b4:	b6 01       	movw	r22, r12
 8b6:	90 e0       	ldi	r25, 0x00	; 0
 8b8:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 8bc:	21 10       	cpse	r2, r1
 8be:	2a 94       	dec	r2
 8c0:	21 e0       	ldi	r18, 0x01	; 1
 8c2:	82 1a       	sub	r8, r18
 8c4:	91 08       	sbc	r9, r1
 8c6:	81 14       	cp	r8, r1
 8c8:	91 04       	cpc	r9, r1
 8ca:	71 f7       	brne	.-36     	; 0x8a8 <__DATA_REGION_LENGTH__+0xa8>
 8cc:	e8 c0       	rjmp	.+464    	; 0xa9e <__stack+0x19f>
 8ce:	84 36       	cpi	r24, 0x64	; 100
 8d0:	11 f0       	breq	.+4      	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8d2:	89 36       	cpi	r24, 0x69	; 105
 8d4:	41 f5       	brne	.+80     	; 0x926 <__stack+0x27>
 8d6:	f8 01       	movw	r30, r16
 8d8:	37 fe       	sbrs	r3, 7
 8da:	07 c0       	rjmp	.+14     	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
 8dc:	60 81       	ld	r22, Z
 8de:	71 81       	ldd	r23, Z+1	; 0x01
 8e0:	82 81       	ldd	r24, Z+2	; 0x02
 8e2:	93 81       	ldd	r25, Z+3	; 0x03
 8e4:	0c 5f       	subi	r16, 0xFC	; 252
 8e6:	1f 4f       	sbci	r17, 0xFF	; 255
 8e8:	08 c0       	rjmp	.+16     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8ea:	60 81       	ld	r22, Z
 8ec:	71 81       	ldd	r23, Z+1	; 0x01
 8ee:	07 2e       	mov	r0, r23
 8f0:	00 0c       	add	r0, r0
 8f2:	88 0b       	sbc	r24, r24
 8f4:	99 0b       	sbc	r25, r25
 8f6:	0e 5f       	subi	r16, 0xFE	; 254
 8f8:	1f 4f       	sbci	r17, 0xFF	; 255
 8fa:	f3 2d       	mov	r31, r3
 8fc:	ff 76       	andi	r31, 0x6F	; 111
 8fe:	3f 2e       	mov	r3, r31
 900:	97 ff       	sbrs	r25, 7
 902:	09 c0       	rjmp	.+18     	; 0x916 <__stack+0x17>
 904:	90 95       	com	r25
 906:	80 95       	com	r24
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	f0 68       	ori	r31, 0x80	; 128
 914:	3f 2e       	mov	r3, r31
 916:	2a e0       	ldi	r18, 0x0A	; 10
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	a3 01       	movw	r20, r6
 91c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__ultoa_invert>
 920:	88 2e       	mov	r8, r24
 922:	86 18       	sub	r8, r6
 924:	45 c0       	rjmp	.+138    	; 0x9b0 <__stack+0xb1>
 926:	85 37       	cpi	r24, 0x75	; 117
 928:	31 f4       	brne	.+12     	; 0x936 <__stack+0x37>
 92a:	23 2d       	mov	r18, r3
 92c:	2f 7e       	andi	r18, 0xEF	; 239
 92e:	b2 2e       	mov	r11, r18
 930:	2a e0       	ldi	r18, 0x0A	; 10
 932:	30 e0       	ldi	r19, 0x00	; 0
 934:	25 c0       	rjmp	.+74     	; 0x980 <__stack+0x81>
 936:	93 2d       	mov	r25, r3
 938:	99 7f       	andi	r25, 0xF9	; 249
 93a:	b9 2e       	mov	r11, r25
 93c:	8f 36       	cpi	r24, 0x6F	; 111
 93e:	c1 f0       	breq	.+48     	; 0x970 <__stack+0x71>
 940:	18 f4       	brcc	.+6      	; 0x948 <__stack+0x49>
 942:	88 35       	cpi	r24, 0x58	; 88
 944:	79 f0       	breq	.+30     	; 0x964 <__stack+0x65>
 946:	b5 c0       	rjmp	.+362    	; 0xab2 <__stack+0x1b3>
 948:	80 37       	cpi	r24, 0x70	; 112
 94a:	19 f0       	breq	.+6      	; 0x952 <__stack+0x53>
 94c:	88 37       	cpi	r24, 0x78	; 120
 94e:	21 f0       	breq	.+8      	; 0x958 <__stack+0x59>
 950:	b0 c0       	rjmp	.+352    	; 0xab2 <__stack+0x1b3>
 952:	e9 2f       	mov	r30, r25
 954:	e0 61       	ori	r30, 0x10	; 16
 956:	be 2e       	mov	r11, r30
 958:	b4 fe       	sbrs	r11, 4
 95a:	0d c0       	rjmp	.+26     	; 0x976 <__stack+0x77>
 95c:	fb 2d       	mov	r31, r11
 95e:	f4 60       	ori	r31, 0x04	; 4
 960:	bf 2e       	mov	r11, r31
 962:	09 c0       	rjmp	.+18     	; 0x976 <__stack+0x77>
 964:	34 fe       	sbrs	r3, 4
 966:	0a c0       	rjmp	.+20     	; 0x97c <__stack+0x7d>
 968:	29 2f       	mov	r18, r25
 96a:	26 60       	ori	r18, 0x06	; 6
 96c:	b2 2e       	mov	r11, r18
 96e:	06 c0       	rjmp	.+12     	; 0x97c <__stack+0x7d>
 970:	28 e0       	ldi	r18, 0x08	; 8
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	05 c0       	rjmp	.+10     	; 0x980 <__stack+0x81>
 976:	20 e1       	ldi	r18, 0x10	; 16
 978:	30 e0       	ldi	r19, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
 97c:	20 e1       	ldi	r18, 0x10	; 16
 97e:	32 e0       	ldi	r19, 0x02	; 2
 980:	f8 01       	movw	r30, r16
 982:	b7 fe       	sbrs	r11, 7
 984:	07 c0       	rjmp	.+14     	; 0x994 <__stack+0x95>
 986:	60 81       	ld	r22, Z
 988:	71 81       	ldd	r23, Z+1	; 0x01
 98a:	82 81       	ldd	r24, Z+2	; 0x02
 98c:	93 81       	ldd	r25, Z+3	; 0x03
 98e:	0c 5f       	subi	r16, 0xFC	; 252
 990:	1f 4f       	sbci	r17, 0xFF	; 255
 992:	06 c0       	rjmp	.+12     	; 0x9a0 <__stack+0xa1>
 994:	60 81       	ld	r22, Z
 996:	71 81       	ldd	r23, Z+1	; 0x01
 998:	80 e0       	ldi	r24, 0x00	; 0
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 5f       	subi	r16, 0xFE	; 254
 99e:	1f 4f       	sbci	r17, 0xFF	; 255
 9a0:	a3 01       	movw	r20, r6
 9a2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__ultoa_invert>
 9a6:	88 2e       	mov	r8, r24
 9a8:	86 18       	sub	r8, r6
 9aa:	fb 2d       	mov	r31, r11
 9ac:	ff 77       	andi	r31, 0x7F	; 127
 9ae:	3f 2e       	mov	r3, r31
 9b0:	36 fe       	sbrs	r3, 6
 9b2:	0d c0       	rjmp	.+26     	; 0x9ce <__stack+0xcf>
 9b4:	23 2d       	mov	r18, r3
 9b6:	2e 7f       	andi	r18, 0xFE	; 254
 9b8:	a2 2e       	mov	r10, r18
 9ba:	89 14       	cp	r8, r9
 9bc:	58 f4       	brcc	.+22     	; 0x9d4 <__stack+0xd5>
 9be:	34 fe       	sbrs	r3, 4
 9c0:	0b c0       	rjmp	.+22     	; 0x9d8 <__stack+0xd9>
 9c2:	32 fc       	sbrc	r3, 2
 9c4:	09 c0       	rjmp	.+18     	; 0x9d8 <__stack+0xd9>
 9c6:	83 2d       	mov	r24, r3
 9c8:	8e 7e       	andi	r24, 0xEE	; 238
 9ca:	a8 2e       	mov	r10, r24
 9cc:	05 c0       	rjmp	.+10     	; 0x9d8 <__stack+0xd9>
 9ce:	b8 2c       	mov	r11, r8
 9d0:	a3 2c       	mov	r10, r3
 9d2:	03 c0       	rjmp	.+6      	; 0x9da <__stack+0xdb>
 9d4:	b8 2c       	mov	r11, r8
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <__stack+0xdb>
 9d8:	b9 2c       	mov	r11, r9
 9da:	a4 fe       	sbrs	r10, 4
 9dc:	0f c0       	rjmp	.+30     	; 0x9fc <__stack+0xfd>
 9de:	fe 01       	movw	r30, r28
 9e0:	e8 0d       	add	r30, r8
 9e2:	f1 1d       	adc	r31, r1
 9e4:	80 81       	ld	r24, Z
 9e6:	80 33       	cpi	r24, 0x30	; 48
 9e8:	21 f4       	brne	.+8      	; 0x9f2 <__stack+0xf3>
 9ea:	9a 2d       	mov	r25, r10
 9ec:	99 7e       	andi	r25, 0xE9	; 233
 9ee:	a9 2e       	mov	r10, r25
 9f0:	09 c0       	rjmp	.+18     	; 0xa04 <__stack+0x105>
 9f2:	a2 fe       	sbrs	r10, 2
 9f4:	06 c0       	rjmp	.+12     	; 0xa02 <__stack+0x103>
 9f6:	b3 94       	inc	r11
 9f8:	b3 94       	inc	r11
 9fa:	04 c0       	rjmp	.+8      	; 0xa04 <__stack+0x105>
 9fc:	8a 2d       	mov	r24, r10
 9fe:	86 78       	andi	r24, 0x86	; 134
 a00:	09 f0       	breq	.+2      	; 0xa04 <__stack+0x105>
 a02:	b3 94       	inc	r11
 a04:	a3 fc       	sbrc	r10, 3
 a06:	11 c0       	rjmp	.+34     	; 0xa2a <__stack+0x12b>
 a08:	a0 fe       	sbrs	r10, 0
 a0a:	06 c0       	rjmp	.+12     	; 0xa18 <__stack+0x119>
 a0c:	b2 14       	cp	r11, r2
 a0e:	88 f4       	brcc	.+34     	; 0xa32 <__stack+0x133>
 a10:	28 0c       	add	r2, r8
 a12:	92 2c       	mov	r9, r2
 a14:	9b 18       	sub	r9, r11
 a16:	0e c0       	rjmp	.+28     	; 0xa34 <__stack+0x135>
 a18:	b2 14       	cp	r11, r2
 a1a:	60 f4       	brcc	.+24     	; 0xa34 <__stack+0x135>
 a1c:	b6 01       	movw	r22, r12
 a1e:	80 e2       	ldi	r24, 0x20	; 32
 a20:	90 e0       	ldi	r25, 0x00	; 0
 a22:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a26:	b3 94       	inc	r11
 a28:	f7 cf       	rjmp	.-18     	; 0xa18 <__stack+0x119>
 a2a:	b2 14       	cp	r11, r2
 a2c:	18 f4       	brcc	.+6      	; 0xa34 <__stack+0x135>
 a2e:	2b 18       	sub	r2, r11
 a30:	02 c0       	rjmp	.+4      	; 0xa36 <__stack+0x137>
 a32:	98 2c       	mov	r9, r8
 a34:	21 2c       	mov	r2, r1
 a36:	a4 fe       	sbrs	r10, 4
 a38:	10 c0       	rjmp	.+32     	; 0xa5a <__stack+0x15b>
 a3a:	b6 01       	movw	r22, r12
 a3c:	80 e3       	ldi	r24, 0x30	; 48
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a44:	a2 fe       	sbrs	r10, 2
 a46:	17 c0       	rjmp	.+46     	; 0xa76 <__stack+0x177>
 a48:	a1 fc       	sbrc	r10, 1
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__stack+0x153>
 a4c:	88 e7       	ldi	r24, 0x78	; 120
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	02 c0       	rjmp	.+4      	; 0xa56 <__stack+0x157>
 a52:	88 e5       	ldi	r24, 0x58	; 88
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	b6 01       	movw	r22, r12
 a58:	0c c0       	rjmp	.+24     	; 0xa72 <__stack+0x173>
 a5a:	8a 2d       	mov	r24, r10
 a5c:	86 78       	andi	r24, 0x86	; 134
 a5e:	59 f0       	breq	.+22     	; 0xa76 <__stack+0x177>
 a60:	a1 fe       	sbrs	r10, 1
 a62:	02 c0       	rjmp	.+4      	; 0xa68 <__stack+0x169>
 a64:	8b e2       	ldi	r24, 0x2B	; 43
 a66:	01 c0       	rjmp	.+2      	; 0xa6a <__stack+0x16b>
 a68:	80 e2       	ldi	r24, 0x20	; 32
 a6a:	a7 fc       	sbrc	r10, 7
 a6c:	8d e2       	ldi	r24, 0x2D	; 45
 a6e:	b6 01       	movw	r22, r12
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a76:	89 14       	cp	r8, r9
 a78:	38 f4       	brcc	.+14     	; 0xa88 <__stack+0x189>
 a7a:	b6 01       	movw	r22, r12
 a7c:	80 e3       	ldi	r24, 0x30	; 48
 a7e:	90 e0       	ldi	r25, 0x00	; 0
 a80:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a84:	9a 94       	dec	r9
 a86:	f7 cf       	rjmp	.-18     	; 0xa76 <__stack+0x177>
 a88:	8a 94       	dec	r8
 a8a:	f3 01       	movw	r30, r6
 a8c:	e8 0d       	add	r30, r8
 a8e:	f1 1d       	adc	r31, r1
 a90:	80 81       	ld	r24, Z
 a92:	b6 01       	movw	r22, r12
 a94:	90 e0       	ldi	r25, 0x00	; 0
 a96:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 a9a:	81 10       	cpse	r8, r1
 a9c:	f5 cf       	rjmp	.-22     	; 0xa88 <__stack+0x189>
 a9e:	22 20       	and	r2, r2
 aa0:	09 f4       	brne	.+2      	; 0xaa4 <__stack+0x1a5>
 aa2:	42 ce       	rjmp	.-892    	; 0x728 <vfprintf+0x24>
 aa4:	b6 01       	movw	r22, r12
 aa6:	80 e2       	ldi	r24, 0x20	; 32
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 79 05 	call	0xaf2	; 0xaf2 <fputc>
 aae:	2a 94       	dec	r2
 ab0:	f6 cf       	rjmp	.-20     	; 0xa9e <__stack+0x19f>
 ab2:	f6 01       	movw	r30, r12
 ab4:	86 81       	ldd	r24, Z+6	; 0x06
 ab6:	97 81       	ldd	r25, Z+7	; 0x07
 ab8:	02 c0       	rjmp	.+4      	; 0xabe <__stack+0x1bf>
 aba:	8f ef       	ldi	r24, 0xFF	; 255
 abc:	9f ef       	ldi	r25, 0xFF	; 255
 abe:	2b 96       	adiw	r28, 0x0b	; 11
 ac0:	e2 e1       	ldi	r30, 0x12	; 18
 ac2:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__epilogue_restores__>

00000ac6 <strnlen_P>:
 ac6:	fc 01       	movw	r30, r24
 ac8:	05 90       	lpm	r0, Z+
 aca:	61 50       	subi	r22, 0x01	; 1
 acc:	70 40       	sbci	r23, 0x00	; 0
 ace:	01 10       	cpse	r0, r1
 ad0:	d8 f7       	brcc	.-10     	; 0xac8 <strnlen_P+0x2>
 ad2:	80 95       	com	r24
 ad4:	90 95       	com	r25
 ad6:	8e 0f       	add	r24, r30
 ad8:	9f 1f       	adc	r25, r31
 ada:	08 95       	ret

00000adc <strnlen>:
 adc:	fc 01       	movw	r30, r24
 ade:	61 50       	subi	r22, 0x01	; 1
 ae0:	70 40       	sbci	r23, 0x00	; 0
 ae2:	01 90       	ld	r0, Z+
 ae4:	01 10       	cpse	r0, r1
 ae6:	d8 f7       	brcc	.-10     	; 0xade <strnlen+0x2>
 ae8:	80 95       	com	r24
 aea:	90 95       	com	r25
 aec:	8e 0f       	add	r24, r30
 aee:	9f 1f       	adc	r25, r31
 af0:	08 95       	ret

00000af2 <fputc>:
 af2:	0f 93       	push	r16
 af4:	1f 93       	push	r17
 af6:	cf 93       	push	r28
 af8:	df 93       	push	r29
 afa:	fb 01       	movw	r30, r22
 afc:	23 81       	ldd	r18, Z+3	; 0x03
 afe:	21 fd       	sbrc	r18, 1
 b00:	03 c0       	rjmp	.+6      	; 0xb08 <fputc+0x16>
 b02:	8f ef       	ldi	r24, 0xFF	; 255
 b04:	9f ef       	ldi	r25, 0xFF	; 255
 b06:	2c c0       	rjmp	.+88     	; 0xb60 <fputc+0x6e>
 b08:	22 ff       	sbrs	r18, 2
 b0a:	16 c0       	rjmp	.+44     	; 0xb38 <fputc+0x46>
 b0c:	46 81       	ldd	r20, Z+6	; 0x06
 b0e:	57 81       	ldd	r21, Z+7	; 0x07
 b10:	24 81       	ldd	r18, Z+4	; 0x04
 b12:	35 81       	ldd	r19, Z+5	; 0x05
 b14:	42 17       	cp	r20, r18
 b16:	53 07       	cpc	r21, r19
 b18:	44 f4       	brge	.+16     	; 0xb2a <fputc+0x38>
 b1a:	a0 81       	ld	r26, Z
 b1c:	b1 81       	ldd	r27, Z+1	; 0x01
 b1e:	9d 01       	movw	r18, r26
 b20:	2f 5f       	subi	r18, 0xFF	; 255
 b22:	3f 4f       	sbci	r19, 0xFF	; 255
 b24:	31 83       	std	Z+1, r19	; 0x01
 b26:	20 83       	st	Z, r18
 b28:	8c 93       	st	X, r24
 b2a:	26 81       	ldd	r18, Z+6	; 0x06
 b2c:	37 81       	ldd	r19, Z+7	; 0x07
 b2e:	2f 5f       	subi	r18, 0xFF	; 255
 b30:	3f 4f       	sbci	r19, 0xFF	; 255
 b32:	37 83       	std	Z+7, r19	; 0x07
 b34:	26 83       	std	Z+6, r18	; 0x06
 b36:	14 c0       	rjmp	.+40     	; 0xb60 <fputc+0x6e>
 b38:	8b 01       	movw	r16, r22
 b3a:	ec 01       	movw	r28, r24
 b3c:	fb 01       	movw	r30, r22
 b3e:	00 84       	ldd	r0, Z+8	; 0x08
 b40:	f1 85       	ldd	r31, Z+9	; 0x09
 b42:	e0 2d       	mov	r30, r0
 b44:	09 95       	icall
 b46:	89 2b       	or	r24, r25
 b48:	e1 f6       	brne	.-72     	; 0xb02 <fputc+0x10>
 b4a:	d8 01       	movw	r26, r16
 b4c:	16 96       	adiw	r26, 0x06	; 6
 b4e:	8d 91       	ld	r24, X+
 b50:	9c 91       	ld	r25, X
 b52:	17 97       	sbiw	r26, 0x07	; 7
 b54:	01 96       	adiw	r24, 0x01	; 1
 b56:	17 96       	adiw	r26, 0x07	; 7
 b58:	9c 93       	st	X, r25
 b5a:	8e 93       	st	-X, r24
 b5c:	16 97       	sbiw	r26, 0x06	; 6
 b5e:	ce 01       	movw	r24, r28
 b60:	df 91       	pop	r29
 b62:	cf 91       	pop	r28
 b64:	1f 91       	pop	r17
 b66:	0f 91       	pop	r16
 b68:	08 95       	ret

00000b6a <__ultoa_invert>:
 b6a:	fa 01       	movw	r30, r20
 b6c:	aa 27       	eor	r26, r26
 b6e:	28 30       	cpi	r18, 0x08	; 8
 b70:	51 f1       	breq	.+84     	; 0xbc6 <__ultoa_invert+0x5c>
 b72:	20 31       	cpi	r18, 0x10	; 16
 b74:	81 f1       	breq	.+96     	; 0xbd6 <__ultoa_invert+0x6c>
 b76:	e8 94       	clt
 b78:	6f 93       	push	r22
 b7a:	6e 7f       	andi	r22, 0xFE	; 254
 b7c:	6e 5f       	subi	r22, 0xFE	; 254
 b7e:	7f 4f       	sbci	r23, 0xFF	; 255
 b80:	8f 4f       	sbci	r24, 0xFF	; 255
 b82:	9f 4f       	sbci	r25, 0xFF	; 255
 b84:	af 4f       	sbci	r26, 0xFF	; 255
 b86:	b1 e0       	ldi	r27, 0x01	; 1
 b88:	3e d0       	rcall	.+124    	; 0xc06 <__ultoa_invert+0x9c>
 b8a:	b4 e0       	ldi	r27, 0x04	; 4
 b8c:	3c d0       	rcall	.+120    	; 0xc06 <__ultoa_invert+0x9c>
 b8e:	67 0f       	add	r22, r23
 b90:	78 1f       	adc	r23, r24
 b92:	89 1f       	adc	r24, r25
 b94:	9a 1f       	adc	r25, r26
 b96:	a1 1d       	adc	r26, r1
 b98:	68 0f       	add	r22, r24
 b9a:	79 1f       	adc	r23, r25
 b9c:	8a 1f       	adc	r24, r26
 b9e:	91 1d       	adc	r25, r1
 ba0:	a1 1d       	adc	r26, r1
 ba2:	6a 0f       	add	r22, r26
 ba4:	71 1d       	adc	r23, r1
 ba6:	81 1d       	adc	r24, r1
 ba8:	91 1d       	adc	r25, r1
 baa:	a1 1d       	adc	r26, r1
 bac:	20 d0       	rcall	.+64     	; 0xbee <__ultoa_invert+0x84>
 bae:	09 f4       	brne	.+2      	; 0xbb2 <__ultoa_invert+0x48>
 bb0:	68 94       	set
 bb2:	3f 91       	pop	r19
 bb4:	2a e0       	ldi	r18, 0x0A	; 10
 bb6:	26 9f       	mul	r18, r22
 bb8:	11 24       	eor	r1, r1
 bba:	30 19       	sub	r19, r0
 bbc:	30 5d       	subi	r19, 0xD0	; 208
 bbe:	31 93       	st	Z+, r19
 bc0:	de f6       	brtc	.-74     	; 0xb78 <__ultoa_invert+0xe>
 bc2:	cf 01       	movw	r24, r30
 bc4:	08 95       	ret
 bc6:	46 2f       	mov	r20, r22
 bc8:	47 70       	andi	r20, 0x07	; 7
 bca:	40 5d       	subi	r20, 0xD0	; 208
 bcc:	41 93       	st	Z+, r20
 bce:	b3 e0       	ldi	r27, 0x03	; 3
 bd0:	0f d0       	rcall	.+30     	; 0xbf0 <__ultoa_invert+0x86>
 bd2:	c9 f7       	brne	.-14     	; 0xbc6 <__ultoa_invert+0x5c>
 bd4:	f6 cf       	rjmp	.-20     	; 0xbc2 <__ultoa_invert+0x58>
 bd6:	46 2f       	mov	r20, r22
 bd8:	4f 70       	andi	r20, 0x0F	; 15
 bda:	40 5d       	subi	r20, 0xD0	; 208
 bdc:	4a 33       	cpi	r20, 0x3A	; 58
 bde:	18 f0       	brcs	.+6      	; 0xbe6 <__ultoa_invert+0x7c>
 be0:	49 5d       	subi	r20, 0xD9	; 217
 be2:	31 fd       	sbrc	r19, 1
 be4:	40 52       	subi	r20, 0x20	; 32
 be6:	41 93       	st	Z+, r20
 be8:	02 d0       	rcall	.+4      	; 0xbee <__ultoa_invert+0x84>
 bea:	a9 f7       	brne	.-22     	; 0xbd6 <__ultoa_invert+0x6c>
 bec:	ea cf       	rjmp	.-44     	; 0xbc2 <__ultoa_invert+0x58>
 bee:	b4 e0       	ldi	r27, 0x04	; 4
 bf0:	a6 95       	lsr	r26
 bf2:	97 95       	ror	r25
 bf4:	87 95       	ror	r24
 bf6:	77 95       	ror	r23
 bf8:	67 95       	ror	r22
 bfa:	ba 95       	dec	r27
 bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__ultoa_invert+0x86>
 bfe:	00 97       	sbiw	r24, 0x00	; 0
 c00:	61 05       	cpc	r22, r1
 c02:	71 05       	cpc	r23, r1
 c04:	08 95       	ret
 c06:	9b 01       	movw	r18, r22
 c08:	ac 01       	movw	r20, r24
 c0a:	0a 2e       	mov	r0, r26
 c0c:	06 94       	lsr	r0
 c0e:	57 95       	ror	r21
 c10:	47 95       	ror	r20
 c12:	37 95       	ror	r19
 c14:	27 95       	ror	r18
 c16:	ba 95       	dec	r27
 c18:	c9 f7       	brne	.-14     	; 0xc0c <__ultoa_invert+0xa2>
 c1a:	62 0f       	add	r22, r18
 c1c:	73 1f       	adc	r23, r19
 c1e:	84 1f       	adc	r24, r20
 c20:	95 1f       	adc	r25, r21
 c22:	a0 1d       	adc	r26, r0
 c24:	08 95       	ret

00000c26 <__prologue_saves__>:
 c26:	2f 92       	push	r2
 c28:	3f 92       	push	r3
 c2a:	4f 92       	push	r4
 c2c:	5f 92       	push	r5
 c2e:	6f 92       	push	r6
 c30:	7f 92       	push	r7
 c32:	8f 92       	push	r8
 c34:	9f 92       	push	r9
 c36:	af 92       	push	r10
 c38:	bf 92       	push	r11
 c3a:	cf 92       	push	r12
 c3c:	df 92       	push	r13
 c3e:	ef 92       	push	r14
 c40:	ff 92       	push	r15
 c42:	0f 93       	push	r16
 c44:	1f 93       	push	r17
 c46:	cf 93       	push	r28
 c48:	df 93       	push	r29
 c4a:	cd b7       	in	r28, 0x3d	; 61
 c4c:	de b7       	in	r29, 0x3e	; 62
 c4e:	ca 1b       	sub	r28, r26
 c50:	db 0b       	sbc	r29, r27
 c52:	0f b6       	in	r0, 0x3f	; 63
 c54:	f8 94       	cli
 c56:	de bf       	out	0x3e, r29	; 62
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	cd bf       	out	0x3d, r28	; 61
 c5c:	09 94       	ijmp

00000c5e <__epilogue_restores__>:
 c5e:	2a 88       	ldd	r2, Y+18	; 0x12
 c60:	39 88       	ldd	r3, Y+17	; 0x11
 c62:	48 88       	ldd	r4, Y+16	; 0x10
 c64:	5f 84       	ldd	r5, Y+15	; 0x0f
 c66:	6e 84       	ldd	r6, Y+14	; 0x0e
 c68:	7d 84       	ldd	r7, Y+13	; 0x0d
 c6a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c6c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c6e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c70:	b9 84       	ldd	r11, Y+9	; 0x09
 c72:	c8 84       	ldd	r12, Y+8	; 0x08
 c74:	df 80       	ldd	r13, Y+7	; 0x07
 c76:	ee 80       	ldd	r14, Y+6	; 0x06
 c78:	fd 80       	ldd	r15, Y+5	; 0x05
 c7a:	0c 81       	ldd	r16, Y+4	; 0x04
 c7c:	1b 81       	ldd	r17, Y+3	; 0x03
 c7e:	aa 81       	ldd	r26, Y+2	; 0x02
 c80:	b9 81       	ldd	r27, Y+1	; 0x01
 c82:	ce 0f       	add	r28, r30
 c84:	d1 1d       	adc	r29, r1
 c86:	0f b6       	in	r0, 0x3f	; 63
 c88:	f8 94       	cli
 c8a:	de bf       	out	0x3e, r29	; 62
 c8c:	0f be       	out	0x3f, r0	; 63
 c8e:	cd bf       	out	0x3d, r28	; 61
 c90:	ed 01       	movw	r28, r26
 c92:	08 95       	ret

00000c94 <_exit>:
 c94:	f8 94       	cli

00000c96 <__stop_program>:
 c96:	ff cf       	rjmp	.-2      	; 0xc96 <__stop_program>
