
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000048  00800100  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b4  00800148  00800148  00000d84  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d84  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000de0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  00000e20  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f3  00000000  00000000  00000fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c66  00000000  00000000  000024ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b27  00000000  00000000  00003111  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b4  00000000  00000000  00003c38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000647  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005d4  00000000  00000000  00004633  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00004c07  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 89 02 	jmp	0x512	; 0x512 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d1 02 	jmp	0x5a2	; 0x5a2 <__vector_18>
  4c:	0c 94 18 03 	jmp	0x630	; 0x630 <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 34       	cpi	r26, 0x48	; 72
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e4       	ldi	r26, 0x48	; 72
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 3f       	cpi	r26, 0xFC	; 252
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 36 01 	call	0x26c	; 0x26c <main>
  9e:	0c 94 52 06 	jmp	0xca4	; 0xca4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_start>:
static char mensaje[50];
static char humedad[50];
static char temperatura[50];

static void DHT11_start(){
	DDRC |= (1 << PINC0);    // Configurar el pin como salida
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1 << PINC0);  // Enviar señal de start al DHT11
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_start+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_start+0x1c>
  c2:	00 00       	nop
	_delay_ms(20);            // Esperar al menos 20 ms
	PORTC |= (1 << PINC0);  // dht high
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1 << PINC0);   // Configurar el pin como entrada, sube automaticamente e valor a 1
  ca:	87 b1       	in	r24, 0x07	; 7
  cc:	8e 7f       	andi	r24, 0xFE	; 254
  ce:	87 b9       	out	0x07, r24	; 7
	while (  PINC & (1 << PINC0) ); //Espero hasta que el DHT11 envie señal de respuesta en 0
  d0:	30 99       	sbic	0x06, 0	; 6
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <DHT11_start+0x2a>
	while ((PINC & (1 << PINC0)) == 0); //DHT11 envia señal en bajo, aproximadamente durante 80us, espero hasta que envie señal en alto
  d4:	30 9b       	sbis	0x06, 0	; 6
  d6:	fe cf       	rjmp	.-4      	; 0xd4 <DHT11_start+0x2e>
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
  d8:	30 99       	sbic	0x06, 0	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <DHT11_start+0x32>
}
  dc:	08 95       	ret

000000de <Leer8Bits>:

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
	for (int i = 0; i < 8; i++)
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	30 e0       	ldi	r19, 0x00	; 0
	while ((PINC & (1 << PINC0)) == 0); //DHT11 envia señal en bajo, aproximadamente durante 80us, espero hasta que envie señal en alto
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
}

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
  e2:	80 e0       	ldi	r24, 0x00	; 0
	for (int i = 0; i < 8; i++)
  e4:	11 c0       	rjmp	.+34     	; 0x108 <Leer8Bits+0x2a>
	{
		while ((PINC & (1 << PINC0)) == 0);
  e6:	30 9b       	sbis	0x06, 0	; 6
  e8:	fe cf       	rjmp	.-4      	; 0xe6 <Leer8Bits+0x8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ea:	90 ea       	ldi	r25, 0xA0	; 160
  ec:	9a 95       	dec	r25
  ee:	f1 f7       	brne	.-4      	; 0xec <Leer8Bits+0xe>
		_delay_us(30); //Espero 29 us, un microsegundo mas de lo que puede durar una seña en bajo
		if (PINC & (1 << PINC0)){ //verifico si  sigue en alto
  f0:	30 9b       	sbis	0x06, 0	; 6
  f2:	05 c0       	rjmp	.+10     	; 0xfe <Leer8Bits+0x20>
			
			byte = ((byte << 1) | 1); // si sigue en alto quiere decir que es un 1
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	88 0f       	add	r24, r24
  f8:	99 1f       	adc	r25, r25
  fa:	81 60       	ori	r24, 0x01	; 1
  fc:	01 c0       	rjmp	.+2      	; 0x100 <Leer8Bits+0x22>
		}
		else
		{
			byte = ((byte << 1) | 0); // si no es un 0
  fe:	88 0f       	add	r24, r24
		}
		while ((PINC & (1 << PINC0)) != 0); // espero al proximo bit, aproximadamente 50us
 100:	30 99       	sbic	0x06, 0	; 6
 102:	fe cf       	rjmp	.-4      	; 0x100 <Leer8Bits+0x22>
	while (  PINC & (1 << PINC0) ); //DHT11 envia señal en alto, aproximadamente durante 80us, espero hasta que envia señal en bajo que es cuando inicia la transmicion
}

static uint8_t Leer8Bits(){
	uint8_t byte = 0;
	for (int i = 0; i < 8; i++)
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	3f 4f       	sbci	r19, 0xFF	; 255
 108:	28 30       	cpi	r18, 0x08	; 8
 10a:	31 05       	cpc	r19, r1
 10c:	64 f3       	brlt	.-40     	; 0xe6 <Leer8Bits+0x8>
			byte = ((byte << 1) | 0); // si no es un 0
		}
		while ((PINC & (1 << PINC0)) != 0); // espero al proximo bit, aproximadamente 50us
	}
	return byte;
}
 10e:	08 95       	ret

00000110 <leerTemperatura>:

static uint8_t leerTemperatura(char *humedad, char *temperatura){
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	18 2f       	mov	r17, r24
 11e:	09 2f       	mov	r16, r25
 120:	f6 2e       	mov	r15, r22
 122:	e7 2e       	mov	r14, r23
	uint8_t checksum = 0;
	cli();
 124:	f8 94       	cli
	DHT11_start();
 126:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_start>
	datos[0] = Leer8Bits(); // Humedad parte entera
 12a:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 12e:	ce ed       	ldi	r28, 0xDE	; 222
 130:	d1 e0       	ldi	r29, 0x01	; 1
 132:	88 83       	st	Y, r24
	datos[1] = Leer8Bits(); // Humedad parte decimal
 134:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 138:	89 83       	std	Y+1, r24	; 0x01
	datos[2] = Leer8Bits(); // Temperatura parte entera
 13a:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 13e:	8a 83       	std	Y+2, r24	; 0x02
	datos[3] = Leer8Bits(); // Temperatura parte decimal
 140:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 144:	8b 83       	std	Y+3, r24	; 0x03
	datos[4] = Leer8Bits(); // checksum
 146:	0e 94 6f 00 	call	0xde	; 0xde <Leer8Bits>
 14a:	8c 83       	std	Y+4, r24	; 0x04
	checksum = datos[0] + datos[1] + datos[2] + datos[3]; // suma los datos en una variable para comparar e dato de checksum
 14c:	38 81       	ld	r19, Y
 14e:	89 81       	ldd	r24, Y+1	; 0x01
 150:	2a 81       	ldd	r18, Y+2	; 0x02
 152:	9b 81       	ldd	r25, Y+3	; 0x03
 154:	83 0f       	add	r24, r19
 156:	82 0f       	add	r24, r18
 158:	89 0f       	add	r24, r25
	
	DDRC |= 1 <<  PINC0;
 15a:	97 b1       	in	r25, 0x07	; 7
 15c:	91 60       	ori	r25, 0x01	; 1
 15e:	97 b9       	out	0x07, r25	; 7
	PORTC |= 1 <<  PINC0;
 160:	98 b1       	in	r25, 0x08	; 8
 162:	91 60       	ori	r25, 0x01	; 1
 164:	98 b9       	out	0x08, r25	; 8
	
	sei();
 166:	78 94       	sei
	
	if (checksum == datos[4]){
 168:	9c 81       	ldd	r25, Y+4	; 0x04
 16a:	89 13       	cpse	r24, r25
 16c:	20 c0       	rjmp	.+64     	; 0x1ae <leerTemperatura+0x9e>
		sprintf(temperatura, "TEMP: %2dC", datos[2]);
 16e:	8a 81       	ldd	r24, Y+2	; 0x02
 170:	1f 92       	push	r1
 172:	8f 93       	push	r24
 174:	87 e0       	ldi	r24, 0x07	; 7
 176:	91 e0       	ldi	r25, 0x01	; 1
 178:	9f 93       	push	r25
 17a:	8f 93       	push	r24
 17c:	ef 92       	push	r14
 17e:	ff 92       	push	r15
 180:	0e 94 68 03 	call	0x6d0	; 0x6d0 <sprintf>
		sprintf(humedad, "HUM: %2d", datos[0]);
 184:	88 81       	ld	r24, Y
 186:	1f 92       	push	r1
 188:	8f 93       	push	r24
 18a:	82 e1       	ldi	r24, 0x12	; 18
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	9f 93       	push	r25
 190:	8f 93       	push	r24
 192:	0f 93       	push	r16
 194:	1f 93       	push	r17
 196:	0e 94 68 03 	call	0x6d0	; 0x6d0 <sprintf>
		return 1;
 19a:	8d b7       	in	r24, 0x3d	; 61
 19c:	9e b7       	in	r25, 0x3e	; 62
 19e:	0c 96       	adiw	r24, 0x0c	; 12
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	f8 94       	cli
 1a4:	9e bf       	out	0x3e, r25	; 62
 1a6:	0f be       	out	0x3f, r0	; 63
 1a8:	8d bf       	out	0x3d, r24	; 61
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <leerTemperatura+0xa0>
	}
	else
	{
		return 0;
 1ae:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	1f 91       	pop	r17
 1b6:	0f 91       	pop	r16
 1b8:	ff 90       	pop	r15
 1ba:	ef 90       	pop	r14
 1bc:	08 95       	ret

000001be <DHT11_enviarInformacion>:

char *DHT11_enviarInformacion(){
 1be:	0f 93       	push	r16
 1c0:	1f 93       	push	r17
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
	leerTemperatura(humedad, temperatura);
 1c6:	68 e4       	ldi	r22, 0x48	; 72
 1c8:	71 e0       	ldi	r23, 0x01	; 1
 1ca:	8a e7       	ldi	r24, 0x7A	; 122
 1cc:	91 e0       	ldi	r25, 0x01	; 1
 1ce:	0e 94 88 00 	call	0x110	; 0x110 <leerTemperatura>
	strcpy(mensaje, humedad);
 1d2:	6a e7       	ldi	r22, 0x7A	; 122
 1d4:	71 e0       	ldi	r23, 0x01	; 1
 1d6:	8c ea       	ldi	r24, 0xAC	; 172
 1d8:	91 e0       	ldi	r25, 0x01	; 1
 1da:	0e 94 61 03 	call	0x6c2	; 0x6c2 <strcpy>
	strcat(mensaje, " ");
 1de:	cc ea       	ldi	r28, 0xAC	; 172
 1e0:	d1 e0       	ldi	r29, 0x01	; 1
 1e2:	fe 01       	movw	r30, r28
 1e4:	01 90       	ld	r0, Z+
 1e6:	00 20       	and	r0, r0
 1e8:	e9 f7       	brne	.-6      	; 0x1e4 <DHT11_enviarInformacion+0x26>
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	00 e2       	ldi	r16, 0x20	; 32
 1ee:	10 e0       	ldi	r17, 0x00	; 0
 1f0:	11 83       	std	Z+1, r17	; 0x01
 1f2:	00 83       	st	Z, r16
	strcat(mensaje, temperatura);
 1f4:	68 e4       	ldi	r22, 0x48	; 72
 1f6:	71 e0       	ldi	r23, 0x01	; 1
 1f8:	ce 01       	movw	r24, r28
 1fa:	0e 94 56 03 	call	0x6ac	; 0x6ac <strcat>
	strcat(mensaje, " ");
 1fe:	09 90       	ld	r0, Y+
 200:	00 20       	and	r0, r0
 202:	e9 f7       	brne	.-6      	; 0x1fe <DHT11_enviarInformacion+0x40>
 204:	21 97       	sbiw	r28, 0x01	; 1
 206:	19 83       	std	Y+1, r17	; 0x01
 208:	08 83       	st	Y, r16
	return mensaje;
 20a:	8c ea       	ldi	r24, 0xAC	; 172
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <i2c_init>:

#include "i2c.h"

void i2c_init() {
	// Configurar el registro TWBR para la frecuencia SCL
	TWBR = (uint8_t)(((F_CPU / SCL_CLOCK) - 16) / 2);
 218:	88 e4       	ldi	r24, 0x48	; 72
 21a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0; // Preescaler a 1
 21e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 222:	08 95       	ret

00000224 <i2c_start>:
}

void i2c_start() {
	// Enviar condición de START
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 224:	84 ea       	ldi	r24, 0xA4	; 164
 226:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 22a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 22e:	88 23       	and	r24, r24
 230:	e4 f7       	brge	.-8      	; 0x22a <i2c_start+0x6>
}
 232:	08 95       	ret

00000234 <i2c_stop>:

void i2c_stop() {
	// Enviar condición de STOP
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 234:	84 e9       	ldi	r24, 0x94	; 148
 236:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 23a:	08 95       	ret

0000023c <i2c_write>:
}

void i2c_write(uint8_t data) {
	TWDR = data; // Cargar dato en el registro TWDR
 23c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Iniciar transmisión
 240:	84 e8       	ldi	r24, 0x84	; 132
 242:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 246:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 24a:	88 23       	and	r24, r24
 24c:	e4 f7       	brge	.-8      	; 0x246 <i2c_write+0xa>
}
 24e:	08 95       	ret

00000250 <i2c_read>:

uint8_t i2c_read(uint8_t ack) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA); // Configurar ACK
 250:	20 e4       	ldi	r18, 0x40	; 64
 252:	82 9f       	mul	r24, r18
 254:	c0 01       	movw	r24, r0
 256:	11 24       	eor	r1, r1
 258:	84 68       	ori	r24, 0x84	; 132
 25a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 25e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 262:	88 23       	and	r24, r24
 264:	e4 f7       	brge	.-8      	; 0x25e <i2c_read+0xe>
	return TWDR; // Devolver el dato recibido
 266:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 26a:	08 95       	ret

0000026c <main>:
#include "timer.h"
#include "cli.h"
#include "dht11.h"

int main(void)
{
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
 270:	cd b7       	in	r28, 0x3d	; 61
 272:	de b7       	in	r29, 0x3e	; 62
 274:	ce 55       	subi	r28, 0x5E	; 94
 276:	d1 09       	sbc	r29, r1
 278:	0f b6       	in	r0, 0x3f	; 63
 27a:	f8 94       	cli
 27c:	de bf       	out	0x3e, r29	; 62
 27e:	0f be       	out	0x3f, r0	; 63
 280:	cd bf       	out	0x3d, r28	; 61
	UART_Init(); // Inicializa el UART
 282:	0e 94 b9 02 	call	0x572	; 0x572 <UART_Init>
	rtc_init();	 // Inicializa el RTC
 286:	0e 94 57 02 	call	0x4ae	; 0x4ae <rtc_init>
	TIMER_init();
 28a:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <TIMER_init>
	TIMER_Enable();
 28e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <TIMER_Enable>
	// CLI_Init();
	RTC_Time now;

	sei();
 292:	78 94       	sei
			UART_ClearCmdFlag();
			CLI_cmd(UART_ReadBuffer());
			UART_Enable_Rx();
		}*/

		if (TIMER_GetClkFlag())
 294:	0e 94 83 02 	call	0x506	; 0x506 <TIMER_GetClkFlag>
 298:	88 23       	and	r24, r24
 29a:	e1 f3       	breq	.-8      	; 0x294 <main+0x28>
		{
			TIMER_ClearClkFlag();
 29c:	0e 94 86 02 	call	0x50c	; 0x50c <TIMER_ClearClkFlag>
			now = rtc_get_time();
 2a0:	0e 94 96 01 	call	0x32c	; 0x32c <rtc_get_time>
 2a4:	29 83       	std	Y+1, r18	; 0x01
 2a6:	3a 83       	std	Y+2, r19	; 0x02
 2a8:	4b 83       	std	Y+3, r20	; 0x03
 2aa:	6d 83       	std	Y+5, r22	; 0x05
 2ac:	7e 83       	std	Y+6, r23	; 0x06
 2ae:	8f 83       	std	Y+7, r24	; 0x07
			char buffer[54]; // Buffer para almacenar el mensaje
			char time[33];
			strcpy(buffer, DHT11_enviarInformacion());
 2b0:	0e 94 df 00 	call	0x1be	; 0x1be <DHT11_enviarInformacion>
 2b4:	bc 01       	movw	r22, r24
 2b6:	ce 01       	movw	r24, r28
 2b8:	08 96       	adiw	r24, 0x08	; 8
 2ba:	0e 94 61 03 	call	0x6c2	; 0x6c2 <strcpy>
			sprintf(time, "FECHA: %02d/%02d/%02d HORA: %02d:%02d:%02d\r\n", now.date, now.month, now.year,now.hours, now.minutes, now.seconds);
 2be:	59 81       	ldd	r21, Y+1	; 0x01
 2c0:	4a 81       	ldd	r20, Y+2	; 0x02
 2c2:	3b 81       	ldd	r19, Y+3	; 0x03
 2c4:	2f 81       	ldd	r18, Y+7	; 0x07
 2c6:	9e 81       	ldd	r25, Y+6	; 0x06
 2c8:	8d 81       	ldd	r24, Y+5	; 0x05
 2ca:	1f 92       	push	r1
 2cc:	5f 93       	push	r21
 2ce:	1f 92       	push	r1
 2d0:	4f 93       	push	r20
 2d2:	1f 92       	push	r1
 2d4:	3f 93       	push	r19
 2d6:	1f 92       	push	r1
 2d8:	2f 93       	push	r18
 2da:	1f 92       	push	r1
 2dc:	9f 93       	push	r25
 2de:	1f 92       	push	r1
 2e0:	8f 93       	push	r24
 2e2:	8b e1       	ldi	r24, 0x1B	; 27
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	9f 93       	push	r25
 2e8:	8f 93       	push	r24
 2ea:	8e 01       	movw	r16, r28
 2ec:	02 5c       	subi	r16, 0xC2	; 194
 2ee:	1f 4f       	sbci	r17, 0xFF	; 255
 2f0:	1f 93       	push	r17
 2f2:	0f 93       	push	r16
 2f4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <sprintf>
			strcat(buffer, time);
 2f8:	b8 01       	movw	r22, r16
 2fa:	ce 01       	movw	r24, r28
 2fc:	08 96       	adiw	r24, 0x08	; 8
 2fe:	0e 94 56 03 	call	0x6ac	; 0x6ac <strcat>
			UART_SendMsg(buffer); // EnvÃ­a la cadena por UART
 302:	ce 01       	movw	r24, r28
 304:	08 96       	adiw	r24, 0x08	; 8
 306:	0e 94 c9 02 	call	0x592	; 0x592 <UART_SendMsg>
 30a:	0f b6       	in	r0, 0x3f	; 63
 30c:	f8 94       	cli
 30e:	de bf       	out	0x3e, r29	; 62
 310:	0f be       	out	0x3f, r0	; 63
 312:	cd bf       	out	0x3d, r28	; 61
 314:	bf cf       	rjmp	.-130    	; 0x294 <main+0x28>

00000316 <bcd_to_dec>:

	i2c_stop();
}

uint8_t bcd_to_dec(uint8_t bcd) {
	return ((bcd / 16) * 10) + (bcd % 16);
 316:	98 2f       	mov	r25, r24
 318:	92 95       	swap	r25
 31a:	9f 70       	andi	r25, 0x0F	; 15
 31c:	99 0f       	add	r25, r25
 31e:	29 2f       	mov	r18, r25
 320:	22 0f       	add	r18, r18
 322:	22 0f       	add	r18, r18
 324:	92 0f       	add	r25, r18
 326:	8f 70       	andi	r24, 0x0F	; 15
}
 328:	89 0f       	add	r24, r25
 32a:	08 95       	ret

0000032c <rtc_get_time>:
void rtc_init() {
	i2c_init(); // Asegura que I2C está inicializado
	rtc_set_time(now);
}

RTC_Time rtc_get_time() {
 32c:	cf 93       	push	r28
 32e:	df 93       	push	r29
 330:	cd b7       	in	r28, 0x3d	; 61
 332:	de b7       	in	r29, 0x3e	; 62
 334:	2e 97       	sbiw	r28, 0x0e	; 14
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	f8 94       	cli
 33a:	de bf       	out	0x3e, r29	; 62
 33c:	0f be       	out	0x3f, r0	; 63
 33e:	cd bf       	out	0x3d, r28	; 61
	RTC_Time time;
	
	i2c_start();
 340:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_WRITE); // Dirección de DS3231 + bit de escritura
 344:	80 ed       	ldi	r24, 0xD0	; 208
 346:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(0x00); // Establecer el registro de segundos como dirección inicial
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_start();
 350:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_READ); // Dirección de DS3231 + bit de lectura
 354:	81 ed       	ldi	r24, 0xD1	; 209
 356:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	time.seconds = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 360:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 364:	88 87       	std	Y+8, r24	; 0x08
	time.minutes = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 36c:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 370:	89 87       	std	Y+9, r24	; 0x09
	time.hours = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 378:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 37c:	8a 87       	std	Y+10, r24	; 0x0a
	time.day = bcd_to_dec(i2c_read(1));     // Leer y enviar ACK
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 384:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 388:	8b 87       	std	Y+11, r24	; 0x0b
	time.date = bcd_to_dec(i2c_read(1));    // Leer y enviar ACK
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 390:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 394:	8c 87       	std	Y+12, r24	; 0x0c
	time.month = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 39c:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 3a0:	8d 87       	std	Y+13, r24	; 0x0d
	time.year = bcd_to_dec(i2c_read(0));    // Leer y enviar NACK
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	0e 94 28 01 	call	0x250	; 0x250 <i2c_read>
 3a8:	0e 94 8b 01 	call	0x316	; 0x316 <bcd_to_dec>
 3ac:	8e 87       	std	Y+14, r24	; 0x0e

	i2c_stop(); // Enviar condición de STOP
 3ae:	0e 94 1a 01 	call	0x234	; 0x234 <i2c_stop>

	return time;
 3b2:	87 e0       	ldi	r24, 0x07	; 7
 3b4:	fe 01       	movw	r30, r28
 3b6:	38 96       	adiw	r30, 0x08	; 8
 3b8:	de 01       	movw	r26, r28
 3ba:	11 96       	adiw	r26, 0x01	; 1
 3bc:	01 90       	ld	r0, Z+
 3be:	0d 92       	st	X+, r0
 3c0:	8a 95       	dec	r24
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <rtc_get_time+0x90>
 3c4:	29 81       	ldd	r18, Y+1	; 0x01
 3c6:	3a 81       	ldd	r19, Y+2	; 0x02
 3c8:	4b 81       	ldd	r20, Y+3	; 0x03
 3ca:	5c 81       	ldd	r21, Y+4	; 0x04
 3cc:	6d 81       	ldd	r22, Y+5	; 0x05
 3ce:	7e 81       	ldd	r23, Y+6	; 0x06
}
 3d0:	8f 81       	ldd	r24, Y+7	; 0x07
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	2e 96       	adiw	r28, 0x0e	; 14
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	de bf       	out	0x3e, r29	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	cd bf       	out	0x3d, r28	; 61
 3e0:	df 91       	pop	r29
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <dec_to_bcd>:
uint8_t bcd_to_dec(uint8_t bcd) {
	return ((bcd / 16) * 10) + (bcd % 16);
}

uint8_t dec_to_bcd(uint8_t val) {
	return (val / 10 * 16) + (val % 10);
 3e6:	9d ec       	ldi	r25, 0xCD	; 205
 3e8:	89 9f       	mul	r24, r25
 3ea:	91 2d       	mov	r25, r1
 3ec:	11 24       	eor	r1, r1
 3ee:	96 95       	lsr	r25
 3f0:	96 95       	lsr	r25
 3f2:	96 95       	lsr	r25
 3f4:	39 2f       	mov	r19, r25
 3f6:	33 0f       	add	r19, r19
 3f8:	23 2f       	mov	r18, r19
 3fa:	22 0f       	add	r18, r18
 3fc:	22 0f       	add	r18, r18
 3fe:	23 0f       	add	r18, r19
 400:	82 1b       	sub	r24, r18
 402:	20 e1       	ldi	r18, 0x10	; 16
 404:	92 9f       	mul	r25, r18
 406:	80 0d       	add	r24, r0
 408:	11 24       	eor	r1, r1
 40a:	08 95       	ret

0000040c <rtc_set_time>:
	i2c_stop(); // Enviar condición de STOP

	return time;
}

void rtc_set_time(RTC_Time time) {
 40c:	cf 93       	push	r28
 40e:	df 93       	push	r29
 410:	cd b7       	in	r28, 0x3d	; 61
 412:	de b7       	in	r29, 0x3e	; 62
 414:	27 97       	sbiw	r28, 0x07	; 7
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	f8 94       	cli
 41a:	de bf       	out	0x3e, r29	; 62
 41c:	0f be       	out	0x3f, r0	; 63
 41e:	cd bf       	out	0x3d, r28	; 61
 420:	29 83       	std	Y+1, r18	; 0x01
 422:	3a 83       	std	Y+2, r19	; 0x02
 424:	4b 83       	std	Y+3, r20	; 0x03
 426:	5c 83       	std	Y+4, r21	; 0x04
 428:	6d 83       	std	Y+5, r22	; 0x05
 42a:	7e 83       	std	Y+6, r23	; 0x06
 42c:	8f 83       	std	Y+7, r24	; 0x07
	i2c_start();
 42e:	0e 94 12 01 	call	0x224	; 0x224 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_WRITE);
 432:	80 ed       	ldi	r24, 0xD0	; 208
 434:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(0x00);  // Establecer el puntero de registro en segundos
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	i2c_write(dec_to_bcd(time.seconds));
 43e:	89 81       	ldd	r24, Y+1	; 0x01
 440:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 444:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.minutes));
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 44e:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.hours));
 452:	8b 81       	ldd	r24, Y+3	; 0x03
 454:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 458:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.day));
 45c:	8c 81       	ldd	r24, Y+4	; 0x04
 45e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 462:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.date));
 466:	8d 81       	ldd	r24, Y+5	; 0x05
 468:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 46c:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.month));
 470:	8e 81       	ldd	r24, Y+6	; 0x06
 472:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 476:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>
	i2c_write(dec_to_bcd(time.year % 100));  // Solo dos dígitos para el año
 47a:	8f 81       	ldd	r24, Y+7	; 0x07
 47c:	99 e2       	ldi	r25, 0x29	; 41
 47e:	89 9f       	mul	r24, r25
 480:	91 2d       	mov	r25, r1
 482:	11 24       	eor	r1, r1
 484:	92 95       	swap	r25
 486:	9f 70       	andi	r25, 0x0F	; 15
 488:	24 e6       	ldi	r18, 0x64	; 100
 48a:	92 9f       	mul	r25, r18
 48c:	80 19       	sub	r24, r0
 48e:	11 24       	eor	r1, r1
 490:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <dec_to_bcd>
 494:	0e 94 1e 01 	call	0x23c	; 0x23c <i2c_write>

	i2c_stop();
 498:	0e 94 1a 01 	call	0x234	; 0x234 <i2c_stop>
}
 49c:	27 96       	adiw	r28, 0x07	; 7
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	f8 94       	cli
 4a2:	de bf       	out	0x3e, r29	; 62
 4a4:	0f be       	out	0x3f, r0	; 63
 4a6:	cd bf       	out	0x3d, r28	; 61
 4a8:	df 91       	pop	r29
 4aa:	cf 91       	pop	r28
 4ac:	08 95       	ret

000004ae <rtc_init>:
	.month = 6,
	.year = 24  // Últimos dos dígitos del año
};

void rtc_init() {
	i2c_init(); // Asegura que I2C está inicializado
 4ae:	0e 94 0c 01 	call	0x218	; 0x218 <i2c_init>
	rtc_set_time(now);
 4b2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4b6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 4ba:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 4be:	50 91 03 01 	lds	r21, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 4c2:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
 4c6:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
 4ca:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__DATA_REGION_ORIGIN__+0x6>
 4ce:	0e 94 06 02 	call	0x40c	; 0x40c <rtc_set_time>
 4d2:	08 95       	ret

000004d4 <TIMER_init>:
	flagClk = 0;
}

void TIMER_ClearCount()
{
	count = 0;
 4d4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 4d8:	e1 e8       	ldi	r30, 0x81	; 129
 4da:	f0 e0       	ldi	r31, 0x00	; 0
 4dc:	10 82       	st	Z, r1
 4de:	80 81       	ld	r24, Z
 4e0:	8b 60       	ori	r24, 0x0B	; 11
 4e2:	80 83       	st	Z, r24
 4e4:	88 ea       	ldi	r24, 0xA8	; 168
 4e6:	91 e6       	ldi	r25, 0x61	; 97
 4e8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 4ec:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 4f0:	08 95       	ret

000004f2 <TIMER_Enable>:
 4f2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 4f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 4fa:	ef e6       	ldi	r30, 0x6F	; 111
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	82 60       	ori	r24, 0x02	; 2
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <TIMER_GetClkFlag>:
 506:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <flagClk>
 50a:	08 95       	ret

0000050c <TIMER_ClearClkFlag>:
 50c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <flagClk>
 510:	08 95       	ret

00000512 <__vector_11>:
}

// Rutina de servicio para el timer que se activa "On Compare Match", definido en el timer a 100ms
ISR(TIMER1_COMPA_vect)
{
 512:	1f 92       	push	r1
 514:	0f 92       	push	r0
 516:	0f b6       	in	r0, 0x3f	; 63
 518:	0f 92       	push	r0
 51a:	11 24       	eor	r1, r1
 51c:	8f 93       	push	r24
	count++;
 51e:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <count>
 522:	8f 5f       	subi	r24, 0xFF	; 255
 524:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <count>
	// 1 segundo
	if (count == 20)
 528:	84 31       	cpi	r24, 0x14	; 20
 52a:	29 f4       	brne	.+10     	; 0x536 <__vector_11+0x24>
	{
		count = 0;
 52c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <count>
		flagClk = 1;
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <flagClk>
	}
}
 536:	8f 91       	pop	r24
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <UART_Disable_Rx>:
	return cmd_flag;
}

void UART_ClearCmdFlag()
{
	cmd_flag = 0;
 542:	e1 ec       	ldi	r30, 0xC1	; 193
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	8f 77       	andi	r24, 0x7F	; 127
 54a:	80 83       	st	Z, r24
 54c:	08 95       	ret

0000054e <UART_Enable_Rx>:
 54e:	e1 ec       	ldi	r30, 0xC1	; 193
 550:	f0 e0       	ldi	r31, 0x00	; 0
 552:	80 81       	ld	r24, Z
 554:	80 68       	ori	r24, 0x80	; 128
 556:	80 83       	st	Z, r24
 558:	08 95       	ret

0000055a <UART_Disable_Tx>:
 55a:	e1 ec       	ldi	r30, 0xC1	; 193
 55c:	f0 e0       	ldi	r31, 0x00	; 0
 55e:	80 81       	ld	r24, Z
 560:	8f 7d       	andi	r24, 0xDF	; 223
 562:	80 83       	st	Z, r24
 564:	08 95       	ret

00000566 <UART_Enable_Tx>:
 566:	e1 ec       	ldi	r30, 0xC1	; 193
 568:	f0 e0       	ldi	r31, 0x00	; 0
 56a:	80 81       	ld	r24, Z
 56c:	80 62       	ori	r24, 0x20	; 32
 56e:	80 83       	st	Z, r24
 570:	08 95       	ret

00000572 <UART_Init>:
 572:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 576:	87 e6       	ldi	r24, 0x67	; 103
 578:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 57c:	86 e0       	ldi	r24, 0x06	; 6
 57e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 582:	88 e1       	ldi	r24, 0x18	; 24
 584:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 588:	0e 94 a7 02 	call	0x54e	; 0x54e <UART_Enable_Rx>
 58c:	0e 94 b3 02 	call	0x566	; 0x566 <UART_Enable_Tx>
 590:	08 95       	ret

00000592 <UART_SendMsg>:
 592:	bc 01       	movw	r22, r24
 594:	82 ef       	ldi	r24, 0xF2	; 242
 596:	91 e0       	ldi	r25, 0x01	; 1
 598:	0e 94 61 03 	call	0x6c2	; 0x6c2 <strcpy>
 59c:	0e 94 b3 02 	call	0x566	; 0x566 <UART_Enable_Tx>
 5a0:	08 95       	ret

000005a2 <__vector_18>:
/*
 * Interrupcion de recepcion
 * Disparada por la UART cuando el buffer esta listo para ser leido
 */
ISR(USART_RX_vect)
{
 5a2:	1f 92       	push	r1
 5a4:	0f 92       	push	r0
 5a6:	0f b6       	in	r0, 0x3f	; 63
 5a8:	0f 92       	push	r0
 5aa:	11 24       	eor	r1, r1
 5ac:	2f 93       	push	r18
 5ae:	3f 93       	push	r19
 5b0:	4f 93       	push	r20
 5b2:	5f 93       	push	r21
 5b4:	6f 93       	push	r22
 5b6:	7f 93       	push	r23
 5b8:	8f 93       	push	r24
 5ba:	9f 93       	push	r25
 5bc:	af 93       	push	r26
 5be:	bf 93       	push	r27
 5c0:	ef 93       	push	r30
 5c2:	ff 93       	push	r31
	static volatile uint8_t i = 0;
	unsigned char dato;

	dato = UDR0;
 5c4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* Detectar fin de linea */
	if (dato == '\r')
 5c8:	8d 30       	cpi	r24, 0x0D	; 13
 5ca:	71 f4       	brne	.+28     	; 0x5e8 <__vector_18+0x46>
	{
		buffer_rx[i] = '\0';
 5cc:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <i.2258>
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	e8 51       	subi	r30, 0x18	; 24
 5d4:	fe 4f       	sbci	r31, 0xFE	; 254
 5d6:	10 82       	st	Z, r1
		i = 0;
 5d8:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <i.2258>
		cmd_flag = 1;
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <cmd_flag>
		UART_Disable_Rx();
 5e2:	0e 94 a1 02 	call	0x542	; 0x542 <UART_Disable_Rx>
 5e6:	13 c0       	rjmp	.+38     	; 0x60e <__vector_18+0x6c>
	}
	/* Detectar borrado de caracter */
	else
	{
		if (dato == '\b')
 5e8:	88 30       	cpi	r24, 0x08	; 8
 5ea:	31 f4       	brne	.+12     	; 0x5f8 <__vector_18+0x56>
			i--;
 5ec:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <i.2258>
 5f0:	81 50       	subi	r24, 0x01	; 1
 5f2:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <i.2258>
 5f6:	0b c0       	rjmp	.+22     	; 0x60e <__vector_18+0x6c>
		else
		{
			buffer_rx[i] = dato;
 5f8:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <i.2258>
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	e8 51       	subi	r30, 0x18	; 24
 600:	fe 4f       	sbci	r31, 0xFE	; 254
 602:	80 83       	st	Z, r24
			i++;
 604:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <i.2258>
 608:	8f 5f       	subi	r24, 0xFF	; 255
 60a:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <i.2258>
		}
	}
}
 60e:	ff 91       	pop	r31
 610:	ef 91       	pop	r30
 612:	bf 91       	pop	r27
 614:	af 91       	pop	r26
 616:	9f 91       	pop	r25
 618:	8f 91       	pop	r24
 61a:	7f 91       	pop	r23
 61c:	6f 91       	pop	r22
 61e:	5f 91       	pop	r21
 620:	4f 91       	pop	r20
 622:	3f 91       	pop	r19
 624:	2f 91       	pop	r18
 626:	0f 90       	pop	r0
 628:	0f be       	out	0x3f, r0	; 63
 62a:	0f 90       	pop	r0
 62c:	1f 90       	pop	r1
 62e:	18 95       	reti

00000630 <__vector_19>:
This bit is set when the transmit buffer is empty, and cleared when the transmit buffer
contains data to be transmitted that has not yet been moved into the shift register.
* Cargo el caracter de mensaje a enviar hasta alcanzar el fin del mensaje
*/
ISR(USART_UDRE_vect)
{
 630:	1f 92       	push	r1
 632:	0f 92       	push	r0
 634:	0f b6       	in	r0, 0x3f	; 63
 636:	0f 92       	push	r0
 638:	11 24       	eor	r1, r1
 63a:	2f 93       	push	r18
 63c:	3f 93       	push	r19
 63e:	4f 93       	push	r20
 640:	5f 93       	push	r21
 642:	6f 93       	push	r22
 644:	7f 93       	push	r23
 646:	8f 93       	push	r24
 648:	9f 93       	push	r25
 64a:	af 93       	push	r26
 64c:	bf 93       	push	r27
 64e:	ef 93       	push	r30
 650:	ff 93       	push	r31
	cli();
 652:	f8 94       	cli
	static volatile uint8_t i = 0;
	if (buffer_tx[i] != '\0')
 654:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <i.2265>
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	ee 50       	subi	r30, 0x0E	; 14
 65c:	fe 4f       	sbci	r31, 0xFE	; 254
 65e:	80 81       	ld	r24, Z
 660:	88 23       	and	r24, r24
 662:	71 f0       	breq	.+28     	; 0x680 <__vector_19+0x50>
	{
		UDR0 = buffer_tx[i];
 664:	e0 91 e5 01 	lds	r30, 0x01E5	; 0x8001e5 <i.2265>
 668:	f0 e0       	ldi	r31, 0x00	; 0
 66a:	ee 50       	subi	r30, 0x0E	; 14
 66c:	fe 4f       	sbci	r31, 0xFE	; 254
 66e:	80 81       	ld	r24, Z
 670:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		i++;
 674:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <i.2265>
 678:	8f 5f       	subi	r24, 0xFF	; 255
 67a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <i.2265>
 67e:	04 c0       	rjmp	.+8      	; 0x688 <__vector_19+0x58>
	}
	else
	{
		i = 0;
 680:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <i.2265>
		// al no escribir el registro udr0 es necesario desactivar
		// las interrupciones para evitar que se produzca otra interrupcion
		UART_Disable_Tx();
 684:	0e 94 ad 02 	call	0x55a	; 0x55a <UART_Disable_Tx>
	}
	sei();
 688:	78 94       	sei
 68a:	ff 91       	pop	r31
 68c:	ef 91       	pop	r30
 68e:	bf 91       	pop	r27
 690:	af 91       	pop	r26
 692:	9f 91       	pop	r25
 694:	8f 91       	pop	r24
 696:	7f 91       	pop	r23
 698:	6f 91       	pop	r22
 69a:	5f 91       	pop	r21
 69c:	4f 91       	pop	r20
 69e:	3f 91       	pop	r19
 6a0:	2f 91       	pop	r18
 6a2:	0f 90       	pop	r0
 6a4:	0f be       	out	0x3f, r0	; 63
 6a6:	0f 90       	pop	r0
 6a8:	1f 90       	pop	r1
 6aa:	18 95       	reti

000006ac <strcat>:
 6ac:	fb 01       	movw	r30, r22
 6ae:	dc 01       	movw	r26, r24
 6b0:	0d 90       	ld	r0, X+
 6b2:	00 20       	and	r0, r0
 6b4:	e9 f7       	brne	.-6      	; 0x6b0 <strcat+0x4>
 6b6:	11 97       	sbiw	r26, 0x01	; 1
 6b8:	01 90       	ld	r0, Z+
 6ba:	0d 92       	st	X+, r0
 6bc:	00 20       	and	r0, r0
 6be:	e1 f7       	brne	.-8      	; 0x6b8 <strcat+0xc>
 6c0:	08 95       	ret

000006c2 <strcpy>:
 6c2:	fb 01       	movw	r30, r22
 6c4:	dc 01       	movw	r26, r24
 6c6:	01 90       	ld	r0, Z+
 6c8:	0d 92       	st	X+, r0
 6ca:	00 20       	and	r0, r0
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <strcpy+0x4>
 6ce:	08 95       	ret

000006d0 <sprintf>:
 6d0:	ae e0       	ldi	r26, 0x0E	; 14
 6d2:	b0 e0       	ldi	r27, 0x00	; 0
 6d4:	ee e6       	ldi	r30, 0x6E	; 110
 6d6:	f3 e0       	ldi	r31, 0x03	; 3
 6d8:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__prologue_saves__+0x1c>
 6dc:	0d 89       	ldd	r16, Y+21	; 0x15
 6de:	1e 89       	ldd	r17, Y+22	; 0x16
 6e0:	86 e0       	ldi	r24, 0x06	; 6
 6e2:	8c 83       	std	Y+4, r24	; 0x04
 6e4:	1a 83       	std	Y+2, r17	; 0x02
 6e6:	09 83       	std	Y+1, r16	; 0x01
 6e8:	8f ef       	ldi	r24, 0xFF	; 255
 6ea:	9f e7       	ldi	r25, 0x7F	; 127
 6ec:	9e 83       	std	Y+6, r25	; 0x06
 6ee:	8d 83       	std	Y+5, r24	; 0x05
 6f0:	ae 01       	movw	r20, r28
 6f2:	47 5e       	subi	r20, 0xE7	; 231
 6f4:	5f 4f       	sbci	r21, 0xFF	; 255
 6f6:	6f 89       	ldd	r22, Y+23	; 0x17
 6f8:	78 8d       	ldd	r23, Y+24	; 0x18
 6fa:	ce 01       	movw	r24, r28
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	0e 94 8a 03 	call	0x714	; 0x714 <vfprintf>
 702:	ef 81       	ldd	r30, Y+7	; 0x07
 704:	f8 85       	ldd	r31, Y+8	; 0x08
 706:	e0 0f       	add	r30, r16
 708:	f1 1f       	adc	r31, r17
 70a:	10 82       	st	Z, r1
 70c:	2e 96       	adiw	r28, 0x0e	; 14
 70e:	e4 e0       	ldi	r30, 0x04	; 4
 710:	0c 94 45 06 	jmp	0xc8a	; 0xc8a <__epilogue_restores__+0x1c>

00000714 <vfprintf>:
 714:	ab e0       	ldi	r26, 0x0B	; 11
 716:	b0 e0       	ldi	r27, 0x00	; 0
 718:	e0 e9       	ldi	r30, 0x90	; 144
 71a:	f3 e0       	ldi	r31, 0x03	; 3
 71c:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__prologue_saves__>
 720:	6c 01       	movw	r12, r24
 722:	7b 01       	movw	r14, r22
 724:	8a 01       	movw	r16, r20
 726:	fc 01       	movw	r30, r24
 728:	17 82       	std	Z+7, r1	; 0x07
 72a:	16 82       	std	Z+6, r1	; 0x06
 72c:	83 81       	ldd	r24, Z+3	; 0x03
 72e:	81 ff       	sbrs	r24, 1
 730:	cc c1       	rjmp	.+920    	; 0xaca <__stack+0x1cb>
 732:	ce 01       	movw	r24, r28
 734:	01 96       	adiw	r24, 0x01	; 1
 736:	3c 01       	movw	r6, r24
 738:	f6 01       	movw	r30, r12
 73a:	93 81       	ldd	r25, Z+3	; 0x03
 73c:	f7 01       	movw	r30, r14
 73e:	93 fd       	sbrc	r25, 3
 740:	85 91       	lpm	r24, Z+
 742:	93 ff       	sbrs	r25, 3
 744:	81 91       	ld	r24, Z+
 746:	7f 01       	movw	r14, r30
 748:	88 23       	and	r24, r24
 74a:	09 f4       	brne	.+2      	; 0x74e <vfprintf+0x3a>
 74c:	ba c1       	rjmp	.+884    	; 0xac2 <__stack+0x1c3>
 74e:	85 32       	cpi	r24, 0x25	; 37
 750:	39 f4       	brne	.+14     	; 0x760 <vfprintf+0x4c>
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	7f 01       	movw	r14, r30
 75c:	85 32       	cpi	r24, 0x25	; 37
 75e:	29 f4       	brne	.+10     	; 0x76a <vfprintf+0x56>
 760:	b6 01       	movw	r22, r12
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 768:	e7 cf       	rjmp	.-50     	; 0x738 <vfprintf+0x24>
 76a:	91 2c       	mov	r9, r1
 76c:	21 2c       	mov	r2, r1
 76e:	31 2c       	mov	r3, r1
 770:	ff e1       	ldi	r31, 0x1F	; 31
 772:	f3 15       	cp	r31, r3
 774:	d8 f0       	brcs	.+54     	; 0x7ac <vfprintf+0x98>
 776:	8b 32       	cpi	r24, 0x2B	; 43
 778:	79 f0       	breq	.+30     	; 0x798 <vfprintf+0x84>
 77a:	38 f4       	brcc	.+14     	; 0x78a <vfprintf+0x76>
 77c:	80 32       	cpi	r24, 0x20	; 32
 77e:	79 f0       	breq	.+30     	; 0x79e <vfprintf+0x8a>
 780:	83 32       	cpi	r24, 0x23	; 35
 782:	a1 f4       	brne	.+40     	; 0x7ac <vfprintf+0x98>
 784:	23 2d       	mov	r18, r3
 786:	20 61       	ori	r18, 0x10	; 16
 788:	1d c0       	rjmp	.+58     	; 0x7c4 <vfprintf+0xb0>
 78a:	8d 32       	cpi	r24, 0x2D	; 45
 78c:	61 f0       	breq	.+24     	; 0x7a6 <vfprintf+0x92>
 78e:	80 33       	cpi	r24, 0x30	; 48
 790:	69 f4       	brne	.+26     	; 0x7ac <vfprintf+0x98>
 792:	23 2d       	mov	r18, r3
 794:	21 60       	ori	r18, 0x01	; 1
 796:	16 c0       	rjmp	.+44     	; 0x7c4 <vfprintf+0xb0>
 798:	83 2d       	mov	r24, r3
 79a:	82 60       	ori	r24, 0x02	; 2
 79c:	38 2e       	mov	r3, r24
 79e:	e3 2d       	mov	r30, r3
 7a0:	e4 60       	ori	r30, 0x04	; 4
 7a2:	3e 2e       	mov	r3, r30
 7a4:	2a c0       	rjmp	.+84     	; 0x7fa <vfprintf+0xe6>
 7a6:	f3 2d       	mov	r31, r3
 7a8:	f8 60       	ori	r31, 0x08	; 8
 7aa:	1d c0       	rjmp	.+58     	; 0x7e6 <vfprintf+0xd2>
 7ac:	37 fc       	sbrc	r3, 7
 7ae:	2d c0       	rjmp	.+90     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7b0:	20 ed       	ldi	r18, 0xD0	; 208
 7b2:	28 0f       	add	r18, r24
 7b4:	2a 30       	cpi	r18, 0x0A	; 10
 7b6:	40 f0       	brcs	.+16     	; 0x7c8 <vfprintf+0xb4>
 7b8:	8e 32       	cpi	r24, 0x2E	; 46
 7ba:	b9 f4       	brne	.+46     	; 0x7ea <vfprintf+0xd6>
 7bc:	36 fc       	sbrc	r3, 6
 7be:	81 c1       	rjmp	.+770    	; 0xac2 <__stack+0x1c3>
 7c0:	23 2d       	mov	r18, r3
 7c2:	20 64       	ori	r18, 0x40	; 64
 7c4:	32 2e       	mov	r3, r18
 7c6:	19 c0       	rjmp	.+50     	; 0x7fa <vfprintf+0xe6>
 7c8:	36 fe       	sbrs	r3, 6
 7ca:	06 c0       	rjmp	.+12     	; 0x7d8 <vfprintf+0xc4>
 7cc:	8a e0       	ldi	r24, 0x0A	; 10
 7ce:	98 9e       	mul	r9, r24
 7d0:	20 0d       	add	r18, r0
 7d2:	11 24       	eor	r1, r1
 7d4:	92 2e       	mov	r9, r18
 7d6:	11 c0       	rjmp	.+34     	; 0x7fa <vfprintf+0xe6>
 7d8:	ea e0       	ldi	r30, 0x0A	; 10
 7da:	2e 9e       	mul	r2, r30
 7dc:	20 0d       	add	r18, r0
 7de:	11 24       	eor	r1, r1
 7e0:	22 2e       	mov	r2, r18
 7e2:	f3 2d       	mov	r31, r3
 7e4:	f0 62       	ori	r31, 0x20	; 32
 7e6:	3f 2e       	mov	r3, r31
 7e8:	08 c0       	rjmp	.+16     	; 0x7fa <vfprintf+0xe6>
 7ea:	8c 36       	cpi	r24, 0x6C	; 108
 7ec:	21 f4       	brne	.+8      	; 0x7f6 <vfprintf+0xe2>
 7ee:	83 2d       	mov	r24, r3
 7f0:	80 68       	ori	r24, 0x80	; 128
 7f2:	38 2e       	mov	r3, r24
 7f4:	02 c0       	rjmp	.+4      	; 0x7fa <vfprintf+0xe6>
 7f6:	88 36       	cpi	r24, 0x68	; 104
 7f8:	41 f4       	brne	.+16     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
 7fa:	f7 01       	movw	r30, r14
 7fc:	93 fd       	sbrc	r25, 3
 7fe:	85 91       	lpm	r24, Z+
 800:	93 ff       	sbrs	r25, 3
 802:	81 91       	ld	r24, Z+
 804:	7f 01       	movw	r14, r30
 806:	81 11       	cpse	r24, r1
 808:	b3 cf       	rjmp	.-154    	; 0x770 <vfprintf+0x5c>
 80a:	98 2f       	mov	r25, r24
 80c:	9f 7d       	andi	r25, 0xDF	; 223
 80e:	95 54       	subi	r25, 0x45	; 69
 810:	93 30       	cpi	r25, 0x03	; 3
 812:	28 f4       	brcc	.+10     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	9f e3       	ldi	r25, 0x3F	; 63
 81a:	99 83       	std	Y+1, r25	; 0x01
 81c:	0d c0       	rjmp	.+26     	; 0x838 <__DATA_REGION_LENGTH__+0x38>
 81e:	83 36       	cpi	r24, 0x63	; 99
 820:	31 f0       	breq	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 822:	83 37       	cpi	r24, 0x73	; 115
 824:	71 f0       	breq	.+28     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
 826:	83 35       	cpi	r24, 0x53	; 83
 828:	09 f0       	breq	.+2      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 82a:	59 c0       	rjmp	.+178    	; 0x8de <__DATA_REGION_LENGTH__+0xde>
 82c:	21 c0       	rjmp	.+66     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 82e:	f8 01       	movw	r30, r16
 830:	80 81       	ld	r24, Z
 832:	89 83       	std	Y+1, r24	; 0x01
 834:	0e 5f       	subi	r16, 0xFE	; 254
 836:	1f 4f       	sbci	r17, 0xFF	; 255
 838:	88 24       	eor	r8, r8
 83a:	83 94       	inc	r8
 83c:	91 2c       	mov	r9, r1
 83e:	53 01       	movw	r10, r6
 840:	13 c0       	rjmp	.+38     	; 0x868 <__DATA_REGION_LENGTH__+0x68>
 842:	28 01       	movw	r4, r16
 844:	f2 e0       	ldi	r31, 0x02	; 2
 846:	4f 0e       	add	r4, r31
 848:	51 1c       	adc	r5, r1
 84a:	f8 01       	movw	r30, r16
 84c:	a0 80       	ld	r10, Z
 84e:	b1 80       	ldd	r11, Z+1	; 0x01
 850:	36 fe       	sbrs	r3, 6
 852:	03 c0       	rjmp	.+6      	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 854:	69 2d       	mov	r22, r9
 856:	70 e0       	ldi	r23, 0x00	; 0
 858:	02 c0       	rjmp	.+4      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
 85a:	6f ef       	ldi	r22, 0xFF	; 255
 85c:	7f ef       	ldi	r23, 0xFF	; 255
 85e:	c5 01       	movw	r24, r10
 860:	0e 94 76 05 	call	0xaec	; 0xaec <strnlen>
 864:	4c 01       	movw	r8, r24
 866:	82 01       	movw	r16, r4
 868:	f3 2d       	mov	r31, r3
 86a:	ff 77       	andi	r31, 0x7F	; 127
 86c:	3f 2e       	mov	r3, r31
 86e:	16 c0       	rjmp	.+44     	; 0x89c <__DATA_REGION_LENGTH__+0x9c>
 870:	28 01       	movw	r4, r16
 872:	22 e0       	ldi	r18, 0x02	; 2
 874:	42 0e       	add	r4, r18
 876:	51 1c       	adc	r5, r1
 878:	f8 01       	movw	r30, r16
 87a:	a0 80       	ld	r10, Z
 87c:	b1 80       	ldd	r11, Z+1	; 0x01
 87e:	36 fe       	sbrs	r3, 6
 880:	03 c0       	rjmp	.+6      	; 0x888 <__DATA_REGION_LENGTH__+0x88>
 882:	69 2d       	mov	r22, r9
 884:	70 e0       	ldi	r23, 0x00	; 0
 886:	02 c0       	rjmp	.+4      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 888:	6f ef       	ldi	r22, 0xFF	; 255
 88a:	7f ef       	ldi	r23, 0xFF	; 255
 88c:	c5 01       	movw	r24, r10
 88e:	0e 94 6b 05 	call	0xad6	; 0xad6 <strnlen_P>
 892:	4c 01       	movw	r8, r24
 894:	f3 2d       	mov	r31, r3
 896:	f0 68       	ori	r31, 0x80	; 128
 898:	3f 2e       	mov	r3, r31
 89a:	82 01       	movw	r16, r4
 89c:	33 fc       	sbrc	r3, 3
 89e:	1b c0       	rjmp	.+54     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8a0:	82 2d       	mov	r24, r2
 8a2:	90 e0       	ldi	r25, 0x00	; 0
 8a4:	88 16       	cp	r8, r24
 8a6:	99 06       	cpc	r9, r25
 8a8:	b0 f4       	brcc	.+44     	; 0x8d6 <__DATA_REGION_LENGTH__+0xd6>
 8aa:	b6 01       	movw	r22, r12
 8ac:	80 e2       	ldi	r24, 0x20	; 32
 8ae:	90 e0       	ldi	r25, 0x00	; 0
 8b0:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 8b4:	2a 94       	dec	r2
 8b6:	f4 cf       	rjmp	.-24     	; 0x8a0 <__DATA_REGION_LENGTH__+0xa0>
 8b8:	f5 01       	movw	r30, r10
 8ba:	37 fc       	sbrc	r3, 7
 8bc:	85 91       	lpm	r24, Z+
 8be:	37 fe       	sbrs	r3, 7
 8c0:	81 91       	ld	r24, Z+
 8c2:	5f 01       	movw	r10, r30
 8c4:	b6 01       	movw	r22, r12
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 8cc:	21 10       	cpse	r2, r1
 8ce:	2a 94       	dec	r2
 8d0:	21 e0       	ldi	r18, 0x01	; 1
 8d2:	82 1a       	sub	r8, r18
 8d4:	91 08       	sbc	r9, r1
 8d6:	81 14       	cp	r8, r1
 8d8:	91 04       	cpc	r9, r1
 8da:	71 f7       	brne	.-36     	; 0x8b8 <__DATA_REGION_LENGTH__+0xb8>
 8dc:	e8 c0       	rjmp	.+464    	; 0xaae <__stack+0x1af>
 8de:	84 36       	cpi	r24, 0x64	; 100
 8e0:	11 f0       	breq	.+4      	; 0x8e6 <__DATA_REGION_LENGTH__+0xe6>
 8e2:	89 36       	cpi	r24, 0x69	; 105
 8e4:	41 f5       	brne	.+80     	; 0x936 <__stack+0x37>
 8e6:	f8 01       	movw	r30, r16
 8e8:	37 fe       	sbrs	r3, 7
 8ea:	07 c0       	rjmp	.+14     	; 0x8fa <__DATA_REGION_LENGTH__+0xfa>
 8ec:	60 81       	ld	r22, Z
 8ee:	71 81       	ldd	r23, Z+1	; 0x01
 8f0:	82 81       	ldd	r24, Z+2	; 0x02
 8f2:	93 81       	ldd	r25, Z+3	; 0x03
 8f4:	0c 5f       	subi	r16, 0xFC	; 252
 8f6:	1f 4f       	sbci	r17, 0xFF	; 255
 8f8:	08 c0       	rjmp	.+16     	; 0x90a <__stack+0xb>
 8fa:	60 81       	ld	r22, Z
 8fc:	71 81       	ldd	r23, Z+1	; 0x01
 8fe:	07 2e       	mov	r0, r23
 900:	00 0c       	add	r0, r0
 902:	88 0b       	sbc	r24, r24
 904:	99 0b       	sbc	r25, r25
 906:	0e 5f       	subi	r16, 0xFE	; 254
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	f3 2d       	mov	r31, r3
 90c:	ff 76       	andi	r31, 0x6F	; 111
 90e:	3f 2e       	mov	r3, r31
 910:	97 ff       	sbrs	r25, 7
 912:	09 c0       	rjmp	.+18     	; 0x926 <__stack+0x27>
 914:	90 95       	com	r25
 916:	80 95       	com	r24
 918:	70 95       	com	r23
 91a:	61 95       	neg	r22
 91c:	7f 4f       	sbci	r23, 0xFF	; 255
 91e:	8f 4f       	sbci	r24, 0xFF	; 255
 920:	9f 4f       	sbci	r25, 0xFF	; 255
 922:	f0 68       	ori	r31, 0x80	; 128
 924:	3f 2e       	mov	r3, r31
 926:	2a e0       	ldi	r18, 0x0A	; 10
 928:	30 e0       	ldi	r19, 0x00	; 0
 92a:	a3 01       	movw	r20, r6
 92c:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 930:	88 2e       	mov	r8, r24
 932:	86 18       	sub	r8, r6
 934:	45 c0       	rjmp	.+138    	; 0x9c0 <__stack+0xc1>
 936:	85 37       	cpi	r24, 0x75	; 117
 938:	31 f4       	brne	.+12     	; 0x946 <__stack+0x47>
 93a:	23 2d       	mov	r18, r3
 93c:	2f 7e       	andi	r18, 0xEF	; 239
 93e:	b2 2e       	mov	r11, r18
 940:	2a e0       	ldi	r18, 0x0A	; 10
 942:	30 e0       	ldi	r19, 0x00	; 0
 944:	25 c0       	rjmp	.+74     	; 0x990 <__stack+0x91>
 946:	93 2d       	mov	r25, r3
 948:	99 7f       	andi	r25, 0xF9	; 249
 94a:	b9 2e       	mov	r11, r25
 94c:	8f 36       	cpi	r24, 0x6F	; 111
 94e:	c1 f0       	breq	.+48     	; 0x980 <__stack+0x81>
 950:	18 f4       	brcc	.+6      	; 0x958 <__stack+0x59>
 952:	88 35       	cpi	r24, 0x58	; 88
 954:	79 f0       	breq	.+30     	; 0x974 <__stack+0x75>
 956:	b5 c0       	rjmp	.+362    	; 0xac2 <__stack+0x1c3>
 958:	80 37       	cpi	r24, 0x70	; 112
 95a:	19 f0       	breq	.+6      	; 0x962 <__stack+0x63>
 95c:	88 37       	cpi	r24, 0x78	; 120
 95e:	21 f0       	breq	.+8      	; 0x968 <__stack+0x69>
 960:	b0 c0       	rjmp	.+352    	; 0xac2 <__stack+0x1c3>
 962:	e9 2f       	mov	r30, r25
 964:	e0 61       	ori	r30, 0x10	; 16
 966:	be 2e       	mov	r11, r30
 968:	b4 fe       	sbrs	r11, 4
 96a:	0d c0       	rjmp	.+26     	; 0x986 <__stack+0x87>
 96c:	fb 2d       	mov	r31, r11
 96e:	f4 60       	ori	r31, 0x04	; 4
 970:	bf 2e       	mov	r11, r31
 972:	09 c0       	rjmp	.+18     	; 0x986 <__stack+0x87>
 974:	34 fe       	sbrs	r3, 4
 976:	0a c0       	rjmp	.+20     	; 0x98c <__stack+0x8d>
 978:	29 2f       	mov	r18, r25
 97a:	26 60       	ori	r18, 0x06	; 6
 97c:	b2 2e       	mov	r11, r18
 97e:	06 c0       	rjmp	.+12     	; 0x98c <__stack+0x8d>
 980:	28 e0       	ldi	r18, 0x08	; 8
 982:	30 e0       	ldi	r19, 0x00	; 0
 984:	05 c0       	rjmp	.+10     	; 0x990 <__stack+0x91>
 986:	20 e1       	ldi	r18, 0x10	; 16
 988:	30 e0       	ldi	r19, 0x00	; 0
 98a:	02 c0       	rjmp	.+4      	; 0x990 <__stack+0x91>
 98c:	20 e1       	ldi	r18, 0x10	; 16
 98e:	32 e0       	ldi	r19, 0x02	; 2
 990:	f8 01       	movw	r30, r16
 992:	b7 fe       	sbrs	r11, 7
 994:	07 c0       	rjmp	.+14     	; 0x9a4 <__stack+0xa5>
 996:	60 81       	ld	r22, Z
 998:	71 81       	ldd	r23, Z+1	; 0x01
 99a:	82 81       	ldd	r24, Z+2	; 0x02
 99c:	93 81       	ldd	r25, Z+3	; 0x03
 99e:	0c 5f       	subi	r16, 0xFC	; 252
 9a0:	1f 4f       	sbci	r17, 0xFF	; 255
 9a2:	06 c0       	rjmp	.+12     	; 0x9b0 <__stack+0xb1>
 9a4:	60 81       	ld	r22, Z
 9a6:	71 81       	ldd	r23, Z+1	; 0x01
 9a8:	80 e0       	ldi	r24, 0x00	; 0
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	0e 5f       	subi	r16, 0xFE	; 254
 9ae:	1f 4f       	sbci	r17, 0xFF	; 255
 9b0:	a3 01       	movw	r20, r6
 9b2:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__ultoa_invert>
 9b6:	88 2e       	mov	r8, r24
 9b8:	86 18       	sub	r8, r6
 9ba:	fb 2d       	mov	r31, r11
 9bc:	ff 77       	andi	r31, 0x7F	; 127
 9be:	3f 2e       	mov	r3, r31
 9c0:	36 fe       	sbrs	r3, 6
 9c2:	0d c0       	rjmp	.+26     	; 0x9de <__stack+0xdf>
 9c4:	23 2d       	mov	r18, r3
 9c6:	2e 7f       	andi	r18, 0xFE	; 254
 9c8:	a2 2e       	mov	r10, r18
 9ca:	89 14       	cp	r8, r9
 9cc:	58 f4       	brcc	.+22     	; 0x9e4 <__stack+0xe5>
 9ce:	34 fe       	sbrs	r3, 4
 9d0:	0b c0       	rjmp	.+22     	; 0x9e8 <__stack+0xe9>
 9d2:	32 fc       	sbrc	r3, 2
 9d4:	09 c0       	rjmp	.+18     	; 0x9e8 <__stack+0xe9>
 9d6:	83 2d       	mov	r24, r3
 9d8:	8e 7e       	andi	r24, 0xEE	; 238
 9da:	a8 2e       	mov	r10, r24
 9dc:	05 c0       	rjmp	.+10     	; 0x9e8 <__stack+0xe9>
 9de:	b8 2c       	mov	r11, r8
 9e0:	a3 2c       	mov	r10, r3
 9e2:	03 c0       	rjmp	.+6      	; 0x9ea <__stack+0xeb>
 9e4:	b8 2c       	mov	r11, r8
 9e6:	01 c0       	rjmp	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	b9 2c       	mov	r11, r9
 9ea:	a4 fe       	sbrs	r10, 4
 9ec:	0f c0       	rjmp	.+30     	; 0xa0c <__stack+0x10d>
 9ee:	fe 01       	movw	r30, r28
 9f0:	e8 0d       	add	r30, r8
 9f2:	f1 1d       	adc	r31, r1
 9f4:	80 81       	ld	r24, Z
 9f6:	80 33       	cpi	r24, 0x30	; 48
 9f8:	21 f4       	brne	.+8      	; 0xa02 <__stack+0x103>
 9fa:	9a 2d       	mov	r25, r10
 9fc:	99 7e       	andi	r25, 0xE9	; 233
 9fe:	a9 2e       	mov	r10, r25
 a00:	09 c0       	rjmp	.+18     	; 0xa14 <__stack+0x115>
 a02:	a2 fe       	sbrs	r10, 2
 a04:	06 c0       	rjmp	.+12     	; 0xa12 <__stack+0x113>
 a06:	b3 94       	inc	r11
 a08:	b3 94       	inc	r11
 a0a:	04 c0       	rjmp	.+8      	; 0xa14 <__stack+0x115>
 a0c:	8a 2d       	mov	r24, r10
 a0e:	86 78       	andi	r24, 0x86	; 134
 a10:	09 f0       	breq	.+2      	; 0xa14 <__stack+0x115>
 a12:	b3 94       	inc	r11
 a14:	a3 fc       	sbrc	r10, 3
 a16:	11 c0       	rjmp	.+34     	; 0xa3a <__stack+0x13b>
 a18:	a0 fe       	sbrs	r10, 0
 a1a:	06 c0       	rjmp	.+12     	; 0xa28 <__stack+0x129>
 a1c:	b2 14       	cp	r11, r2
 a1e:	88 f4       	brcc	.+34     	; 0xa42 <__stack+0x143>
 a20:	28 0c       	add	r2, r8
 a22:	92 2c       	mov	r9, r2
 a24:	9b 18       	sub	r9, r11
 a26:	0e c0       	rjmp	.+28     	; 0xa44 <__stack+0x145>
 a28:	b2 14       	cp	r11, r2
 a2a:	60 f4       	brcc	.+24     	; 0xa44 <__stack+0x145>
 a2c:	b6 01       	movw	r22, r12
 a2e:	80 e2       	ldi	r24, 0x20	; 32
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a36:	b3 94       	inc	r11
 a38:	f7 cf       	rjmp	.-18     	; 0xa28 <__stack+0x129>
 a3a:	b2 14       	cp	r11, r2
 a3c:	18 f4       	brcc	.+6      	; 0xa44 <__stack+0x145>
 a3e:	2b 18       	sub	r2, r11
 a40:	02 c0       	rjmp	.+4      	; 0xa46 <__stack+0x147>
 a42:	98 2c       	mov	r9, r8
 a44:	21 2c       	mov	r2, r1
 a46:	a4 fe       	sbrs	r10, 4
 a48:	10 c0       	rjmp	.+32     	; 0xa6a <__stack+0x16b>
 a4a:	b6 01       	movw	r22, r12
 a4c:	80 e3       	ldi	r24, 0x30	; 48
 a4e:	90 e0       	ldi	r25, 0x00	; 0
 a50:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a54:	a2 fe       	sbrs	r10, 2
 a56:	17 c0       	rjmp	.+46     	; 0xa86 <__stack+0x187>
 a58:	a1 fc       	sbrc	r10, 1
 a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__stack+0x163>
 a5c:	88 e7       	ldi	r24, 0x78	; 120
 a5e:	90 e0       	ldi	r25, 0x00	; 0
 a60:	02 c0       	rjmp	.+4      	; 0xa66 <__stack+0x167>
 a62:	88 e5       	ldi	r24, 0x58	; 88
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	b6 01       	movw	r22, r12
 a68:	0c c0       	rjmp	.+24     	; 0xa82 <__stack+0x183>
 a6a:	8a 2d       	mov	r24, r10
 a6c:	86 78       	andi	r24, 0x86	; 134
 a6e:	59 f0       	breq	.+22     	; 0xa86 <__stack+0x187>
 a70:	a1 fe       	sbrs	r10, 1
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <__stack+0x179>
 a74:	8b e2       	ldi	r24, 0x2B	; 43
 a76:	01 c0       	rjmp	.+2      	; 0xa7a <__stack+0x17b>
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	a7 fc       	sbrc	r10, 7
 a7c:	8d e2       	ldi	r24, 0x2D	; 45
 a7e:	b6 01       	movw	r22, r12
 a80:	90 e0       	ldi	r25, 0x00	; 0
 a82:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a86:	89 14       	cp	r8, r9
 a88:	38 f4       	brcc	.+14     	; 0xa98 <__stack+0x199>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e3       	ldi	r24, 0x30	; 48
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 a94:	9a 94       	dec	r9
 a96:	f7 cf       	rjmp	.-18     	; 0xa86 <__stack+0x187>
 a98:	8a 94       	dec	r8
 a9a:	f3 01       	movw	r30, r6
 a9c:	e8 0d       	add	r30, r8
 a9e:	f1 1d       	adc	r31, r1
 aa0:	80 81       	ld	r24, Z
 aa2:	b6 01       	movw	r22, r12
 aa4:	90 e0       	ldi	r25, 0x00	; 0
 aa6:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 aaa:	81 10       	cpse	r8, r1
 aac:	f5 cf       	rjmp	.-22     	; 0xa98 <__stack+0x199>
 aae:	22 20       	and	r2, r2
 ab0:	09 f4       	brne	.+2      	; 0xab4 <__stack+0x1b5>
 ab2:	42 ce       	rjmp	.-892    	; 0x738 <vfprintf+0x24>
 ab4:	b6 01       	movw	r22, r12
 ab6:	80 e2       	ldi	r24, 0x20	; 32
 ab8:	90 e0       	ldi	r25, 0x00	; 0
 aba:	0e 94 81 05 	call	0xb02	; 0xb02 <fputc>
 abe:	2a 94       	dec	r2
 ac0:	f6 cf       	rjmp	.-20     	; 0xaae <__stack+0x1af>
 ac2:	f6 01       	movw	r30, r12
 ac4:	86 81       	ldd	r24, Z+6	; 0x06
 ac6:	97 81       	ldd	r25, Z+7	; 0x07
 ac8:	02 c0       	rjmp	.+4      	; 0xace <__stack+0x1cf>
 aca:	8f ef       	ldi	r24, 0xFF	; 255
 acc:	9f ef       	ldi	r25, 0xFF	; 255
 ace:	2b 96       	adiw	r28, 0x0b	; 11
 ad0:	e2 e1       	ldi	r30, 0x12	; 18
 ad2:	0c 94 37 06 	jmp	0xc6e	; 0xc6e <__epilogue_restores__>

00000ad6 <strnlen_P>:
 ad6:	fc 01       	movw	r30, r24
 ad8:	05 90       	lpm	r0, Z+
 ada:	61 50       	subi	r22, 0x01	; 1
 adc:	70 40       	sbci	r23, 0x00	; 0
 ade:	01 10       	cpse	r0, r1
 ae0:	d8 f7       	brcc	.-10     	; 0xad8 <strnlen_P+0x2>
 ae2:	80 95       	com	r24
 ae4:	90 95       	com	r25
 ae6:	8e 0f       	add	r24, r30
 ae8:	9f 1f       	adc	r25, r31
 aea:	08 95       	ret

00000aec <strnlen>:
 aec:	fc 01       	movw	r30, r24
 aee:	61 50       	subi	r22, 0x01	; 1
 af0:	70 40       	sbci	r23, 0x00	; 0
 af2:	01 90       	ld	r0, Z+
 af4:	01 10       	cpse	r0, r1
 af6:	d8 f7       	brcc	.-10     	; 0xaee <strnlen+0x2>
 af8:	80 95       	com	r24
 afa:	90 95       	com	r25
 afc:	8e 0f       	add	r24, r30
 afe:	9f 1f       	adc	r25, r31
 b00:	08 95       	ret

00000b02 <fputc>:
 b02:	0f 93       	push	r16
 b04:	1f 93       	push	r17
 b06:	cf 93       	push	r28
 b08:	df 93       	push	r29
 b0a:	fb 01       	movw	r30, r22
 b0c:	23 81       	ldd	r18, Z+3	; 0x03
 b0e:	21 fd       	sbrc	r18, 1
 b10:	03 c0       	rjmp	.+6      	; 0xb18 <fputc+0x16>
 b12:	8f ef       	ldi	r24, 0xFF	; 255
 b14:	9f ef       	ldi	r25, 0xFF	; 255
 b16:	2c c0       	rjmp	.+88     	; 0xb70 <fputc+0x6e>
 b18:	22 ff       	sbrs	r18, 2
 b1a:	16 c0       	rjmp	.+44     	; 0xb48 <fputc+0x46>
 b1c:	46 81       	ldd	r20, Z+6	; 0x06
 b1e:	57 81       	ldd	r21, Z+7	; 0x07
 b20:	24 81       	ldd	r18, Z+4	; 0x04
 b22:	35 81       	ldd	r19, Z+5	; 0x05
 b24:	42 17       	cp	r20, r18
 b26:	53 07       	cpc	r21, r19
 b28:	44 f4       	brge	.+16     	; 0xb3a <fputc+0x38>
 b2a:	a0 81       	ld	r26, Z
 b2c:	b1 81       	ldd	r27, Z+1	; 0x01
 b2e:	9d 01       	movw	r18, r26
 b30:	2f 5f       	subi	r18, 0xFF	; 255
 b32:	3f 4f       	sbci	r19, 0xFF	; 255
 b34:	31 83       	std	Z+1, r19	; 0x01
 b36:	20 83       	st	Z, r18
 b38:	8c 93       	st	X, r24
 b3a:	26 81       	ldd	r18, Z+6	; 0x06
 b3c:	37 81       	ldd	r19, Z+7	; 0x07
 b3e:	2f 5f       	subi	r18, 0xFF	; 255
 b40:	3f 4f       	sbci	r19, 0xFF	; 255
 b42:	37 83       	std	Z+7, r19	; 0x07
 b44:	26 83       	std	Z+6, r18	; 0x06
 b46:	14 c0       	rjmp	.+40     	; 0xb70 <fputc+0x6e>
 b48:	8b 01       	movw	r16, r22
 b4a:	ec 01       	movw	r28, r24
 b4c:	fb 01       	movw	r30, r22
 b4e:	00 84       	ldd	r0, Z+8	; 0x08
 b50:	f1 85       	ldd	r31, Z+9	; 0x09
 b52:	e0 2d       	mov	r30, r0
 b54:	09 95       	icall
 b56:	89 2b       	or	r24, r25
 b58:	e1 f6       	brne	.-72     	; 0xb12 <fputc+0x10>
 b5a:	d8 01       	movw	r26, r16
 b5c:	16 96       	adiw	r26, 0x06	; 6
 b5e:	8d 91       	ld	r24, X+
 b60:	9c 91       	ld	r25, X
 b62:	17 97       	sbiw	r26, 0x07	; 7
 b64:	01 96       	adiw	r24, 0x01	; 1
 b66:	17 96       	adiw	r26, 0x07	; 7
 b68:	9c 93       	st	X, r25
 b6a:	8e 93       	st	-X, r24
 b6c:	16 97       	sbiw	r26, 0x06	; 6
 b6e:	ce 01       	movw	r24, r28
 b70:	df 91       	pop	r29
 b72:	cf 91       	pop	r28
 b74:	1f 91       	pop	r17
 b76:	0f 91       	pop	r16
 b78:	08 95       	ret

00000b7a <__ultoa_invert>:
 b7a:	fa 01       	movw	r30, r20
 b7c:	aa 27       	eor	r26, r26
 b7e:	28 30       	cpi	r18, 0x08	; 8
 b80:	51 f1       	breq	.+84     	; 0xbd6 <__ultoa_invert+0x5c>
 b82:	20 31       	cpi	r18, 0x10	; 16
 b84:	81 f1       	breq	.+96     	; 0xbe6 <__ultoa_invert+0x6c>
 b86:	e8 94       	clt
 b88:	6f 93       	push	r22
 b8a:	6e 7f       	andi	r22, 0xFE	; 254
 b8c:	6e 5f       	subi	r22, 0xFE	; 254
 b8e:	7f 4f       	sbci	r23, 0xFF	; 255
 b90:	8f 4f       	sbci	r24, 0xFF	; 255
 b92:	9f 4f       	sbci	r25, 0xFF	; 255
 b94:	af 4f       	sbci	r26, 0xFF	; 255
 b96:	b1 e0       	ldi	r27, 0x01	; 1
 b98:	3e d0       	rcall	.+124    	; 0xc16 <__ultoa_invert+0x9c>
 b9a:	b4 e0       	ldi	r27, 0x04	; 4
 b9c:	3c d0       	rcall	.+120    	; 0xc16 <__ultoa_invert+0x9c>
 b9e:	67 0f       	add	r22, r23
 ba0:	78 1f       	adc	r23, r24
 ba2:	89 1f       	adc	r24, r25
 ba4:	9a 1f       	adc	r25, r26
 ba6:	a1 1d       	adc	r26, r1
 ba8:	68 0f       	add	r22, r24
 baa:	79 1f       	adc	r23, r25
 bac:	8a 1f       	adc	r24, r26
 bae:	91 1d       	adc	r25, r1
 bb0:	a1 1d       	adc	r26, r1
 bb2:	6a 0f       	add	r22, r26
 bb4:	71 1d       	adc	r23, r1
 bb6:	81 1d       	adc	r24, r1
 bb8:	91 1d       	adc	r25, r1
 bba:	a1 1d       	adc	r26, r1
 bbc:	20 d0       	rcall	.+64     	; 0xbfe <__ultoa_invert+0x84>
 bbe:	09 f4       	brne	.+2      	; 0xbc2 <__ultoa_invert+0x48>
 bc0:	68 94       	set
 bc2:	3f 91       	pop	r19
 bc4:	2a e0       	ldi	r18, 0x0A	; 10
 bc6:	26 9f       	mul	r18, r22
 bc8:	11 24       	eor	r1, r1
 bca:	30 19       	sub	r19, r0
 bcc:	30 5d       	subi	r19, 0xD0	; 208
 bce:	31 93       	st	Z+, r19
 bd0:	de f6       	brtc	.-74     	; 0xb88 <__ultoa_invert+0xe>
 bd2:	cf 01       	movw	r24, r30
 bd4:	08 95       	ret
 bd6:	46 2f       	mov	r20, r22
 bd8:	47 70       	andi	r20, 0x07	; 7
 bda:	40 5d       	subi	r20, 0xD0	; 208
 bdc:	41 93       	st	Z+, r20
 bde:	b3 e0       	ldi	r27, 0x03	; 3
 be0:	0f d0       	rcall	.+30     	; 0xc00 <__ultoa_invert+0x86>
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0x5c>
 be4:	f6 cf       	rjmp	.-20     	; 0xbd2 <__ultoa_invert+0x58>
 be6:	46 2f       	mov	r20, r22
 be8:	4f 70       	andi	r20, 0x0F	; 15
 bea:	40 5d       	subi	r20, 0xD0	; 208
 bec:	4a 33       	cpi	r20, 0x3A	; 58
 bee:	18 f0       	brcs	.+6      	; 0xbf6 <__ultoa_invert+0x7c>
 bf0:	49 5d       	subi	r20, 0xD9	; 217
 bf2:	31 fd       	sbrc	r19, 1
 bf4:	40 52       	subi	r20, 0x20	; 32
 bf6:	41 93       	st	Z+, r20
 bf8:	02 d0       	rcall	.+4      	; 0xbfe <__ultoa_invert+0x84>
 bfa:	a9 f7       	brne	.-22     	; 0xbe6 <__ultoa_invert+0x6c>
 bfc:	ea cf       	rjmp	.-44     	; 0xbd2 <__ultoa_invert+0x58>
 bfe:	b4 e0       	ldi	r27, 0x04	; 4
 c00:	a6 95       	lsr	r26
 c02:	97 95       	ror	r25
 c04:	87 95       	ror	r24
 c06:	77 95       	ror	r23
 c08:	67 95       	ror	r22
 c0a:	ba 95       	dec	r27
 c0c:	c9 f7       	brne	.-14     	; 0xc00 <__ultoa_invert+0x86>
 c0e:	00 97       	sbiw	r24, 0x00	; 0
 c10:	61 05       	cpc	r22, r1
 c12:	71 05       	cpc	r23, r1
 c14:	08 95       	ret
 c16:	9b 01       	movw	r18, r22
 c18:	ac 01       	movw	r20, r24
 c1a:	0a 2e       	mov	r0, r26
 c1c:	06 94       	lsr	r0
 c1e:	57 95       	ror	r21
 c20:	47 95       	ror	r20
 c22:	37 95       	ror	r19
 c24:	27 95       	ror	r18
 c26:	ba 95       	dec	r27
 c28:	c9 f7       	brne	.-14     	; 0xc1c <__ultoa_invert+0xa2>
 c2a:	62 0f       	add	r22, r18
 c2c:	73 1f       	adc	r23, r19
 c2e:	84 1f       	adc	r24, r20
 c30:	95 1f       	adc	r25, r21
 c32:	a0 1d       	adc	r26, r0
 c34:	08 95       	ret

00000c36 <__prologue_saves__>:
 c36:	2f 92       	push	r2
 c38:	3f 92       	push	r3
 c3a:	4f 92       	push	r4
 c3c:	5f 92       	push	r5
 c3e:	6f 92       	push	r6
 c40:	7f 92       	push	r7
 c42:	8f 92       	push	r8
 c44:	9f 92       	push	r9
 c46:	af 92       	push	r10
 c48:	bf 92       	push	r11
 c4a:	cf 92       	push	r12
 c4c:	df 92       	push	r13
 c4e:	ef 92       	push	r14
 c50:	ff 92       	push	r15
 c52:	0f 93       	push	r16
 c54:	1f 93       	push	r17
 c56:	cf 93       	push	r28
 c58:	df 93       	push	r29
 c5a:	cd b7       	in	r28, 0x3d	; 61
 c5c:	de b7       	in	r29, 0x3e	; 62
 c5e:	ca 1b       	sub	r28, r26
 c60:	db 0b       	sbc	r29, r27
 c62:	0f b6       	in	r0, 0x3f	; 63
 c64:	f8 94       	cli
 c66:	de bf       	out	0x3e, r29	; 62
 c68:	0f be       	out	0x3f, r0	; 63
 c6a:	cd bf       	out	0x3d, r28	; 61
 c6c:	09 94       	ijmp

00000c6e <__epilogue_restores__>:
 c6e:	2a 88       	ldd	r2, Y+18	; 0x12
 c70:	39 88       	ldd	r3, Y+17	; 0x11
 c72:	48 88       	ldd	r4, Y+16	; 0x10
 c74:	5f 84       	ldd	r5, Y+15	; 0x0f
 c76:	6e 84       	ldd	r6, Y+14	; 0x0e
 c78:	7d 84       	ldd	r7, Y+13	; 0x0d
 c7a:	8c 84       	ldd	r8, Y+12	; 0x0c
 c7c:	9b 84       	ldd	r9, Y+11	; 0x0b
 c7e:	aa 84       	ldd	r10, Y+10	; 0x0a
 c80:	b9 84       	ldd	r11, Y+9	; 0x09
 c82:	c8 84       	ldd	r12, Y+8	; 0x08
 c84:	df 80       	ldd	r13, Y+7	; 0x07
 c86:	ee 80       	ldd	r14, Y+6	; 0x06
 c88:	fd 80       	ldd	r15, Y+5	; 0x05
 c8a:	0c 81       	ldd	r16, Y+4	; 0x04
 c8c:	1b 81       	ldd	r17, Y+3	; 0x03
 c8e:	aa 81       	ldd	r26, Y+2	; 0x02
 c90:	b9 81       	ldd	r27, Y+1	; 0x01
 c92:	ce 0f       	add	r28, r30
 c94:	d1 1d       	adc	r29, r1
 c96:	0f b6       	in	r0, 0x3f	; 63
 c98:	f8 94       	cli
 c9a:	de bf       	out	0x3e, r29	; 62
 c9c:	0f be       	out	0x3f, r0	; 63
 c9e:	cd bf       	out	0x3d, r28	; 61
 ca0:	ed 01       	movw	r28, r26
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
