
TP3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000084  00800100  00000af0  00000b84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000af0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800184  00800184  00000c08  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012d7  00000000  00000000  00000e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b99  00000000  00000000  00002103  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009bc  00000000  00000000  00002c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003658  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  0000398c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040d  00000000  00000000  00003f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  0000435d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 a6 01 	jmp	0x34c	; 0x34c <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 f7 01 	jmp	0x3ee	; 0x3ee <__vector_18>
  4c:	0c 94 3e 02 	jmp	0x47c	; 0x47c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 ef       	ldi	r30, 0xF0	; 240
  7c:	fa e0       	ldi	r31, 0x0A	; 10
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 38       	cpi	r26, 0x84	; 132
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e8       	ldi	r26, 0x84	; 132
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 39       	cpi	r26, 0x9E	; 158
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 cf 00 	call	0x19e	; 0x19e <main>
  9e:	0c 94 76 05 	jmp	0xaec	; 0xaec <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <Get_Command>:
static volatile uint8_t commandFlag = 0;
static char welcome[] = "Bienvenido\rON: para encender, OFF para apagar, RST para reiniciar\r";
static char invalid[] = "command invalido\r";

static int Get_Command(char command[])
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	ec 01       	movw	r28, r24
	if (!strcmp(command, "ON"))
  ac:	65 e5       	ldi	r22, 0x55	; 85
  ae:	71 e0       	ldi	r23, 0x01	; 1
  b0:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <strcmp>
  b4:	00 97       	sbiw	r24, 0x00	; 0
  b6:	b1 f0       	breq	.+44     	; 0xe4 <Get_Command+0x3e>
	{
		return 0; // el comando es on
	}
	if (!strcmp(command, "OFF"))
  b8:	68 e5       	ldi	r22, 0x58	; 88
  ba:	71 e0       	ldi	r23, 0x01	; 1
  bc:	ce 01       	movw	r24, r28
  be:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <strcmp>
  c2:	89 2b       	or	r24, r25
  c4:	51 f0       	breq	.+20     	; 0xda <Get_Command+0x34>
	{
		return 1; // el comando es off
	}
	if (!strcmp(command, "RST"))
  c6:	6c e5       	ldi	r22, 0x5C	; 92
  c8:	71 e0       	ldi	r23, 0x01	; 1
  ca:	ce 01       	movw	r24, r28
  cc:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <strcmp>
  d0:	89 2b       	or	r24, r25
  d2:	31 f4       	brne	.+12     	; 0xe0 <Get_Command+0x3a>
	{
		return 2; // el comando es rst
  d4:	82 e0       	ldi	r24, 0x02	; 2
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <Get_Command+0x3e>
	{
		return 0; // el comando es on
	}
	if (!strcmp(command, "OFF"))
	{
		return 1; // el comando es off
  da:	81 e0       	ldi	r24, 0x01	; 1
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	02 c0       	rjmp	.+4      	; 0xe4 <Get_Command+0x3e>
	}
	if (!strcmp(command, "RST"))
	{
		return 2; // el comando es rst
	}
	return 3; // comando invalid
  e0:	83 e0       	ldi	r24, 0x03	; 3
  e2:	90 e0       	ldi	r25, 0x00	; 0
}
  e4:	df 91       	pop	r29
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <CLI_Init>:

void CLI_Init()
{
	UART_SendMsg(welcome);
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	91 e0       	ldi	r25, 0x01	; 1
  ee:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_SendMsg>
  f2:	08 95       	ret

000000f4 <CLI_GetCommandFlag>:
}

uint8_t CLI_GetCommandFlag()
{
	return commandFlag;
  f4:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <__data_end>
};
  f8:	08 95       	ret

000000fa <CLI_cmd>:

void CLI_cmd(char command[])
{

	int nroCommand = Get_Command(command);
  fa:	0e 94 53 00 	call	0xa6	; 0xa6 <Get_Command>

	switch (nroCommand) // evaluo si recibi un comando o un numero invalido
  fe:	81 30       	cpi	r24, 0x01	; 1
 100:	91 05       	cpc	r25, r1
 102:	81 f0       	breq	.+32     	; 0x124 <CLI_cmd+0x2a>
 104:	1c f4       	brge	.+6      	; 0x10c <CLI_cmd+0x12>
 106:	89 2b       	or	r24, r25
 108:	39 f0       	breq	.+14     	; 0x118 <CLI_cmd+0x1e>
 10a:	08 95       	ret
 10c:	82 30       	cpi	r24, 0x02	; 2
 10e:	91 05       	cpc	r25, r1
 110:	91 f0       	breq	.+36     	; 0x136 <CLI_cmd+0x3c>
 112:	03 97       	sbiw	r24, 0x03	; 3
 114:	a9 f0       	breq	.+42     	; 0x140 <CLI_cmd+0x46>
 116:	08 95       	ret
	{
	case 0: // on
		commandFlag = 1;
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	80 93 84 01 	sts	0x0184, r24	; 0x800184 <__data_end>
	//	UART_SendMsg(DHT11_getMessage());
		TIMER_Enable();
 11e:	0e 94 90 01 	call	0x320	; 0x320 <TIMER_Enable>
		break;
 122:	08 95       	ret
	case 1: // off
		commandFlag = 0;
 124:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <__data_end>
		UART_SendMsg("\rOff\r");
 128:	80 e6       	ldi	r24, 0x60	; 96
 12a:	91 e0       	ldi	r25, 0x01	; 1
 12c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_SendMsg>
		TIMER_Disable();
 130:	0e 94 9a 01 	call	0x334	; 0x334 <TIMER_Disable>
		break;
 134:	08 95       	ret
	case 2: // reset
		UART_SendMsg(welcome);
 136:	82 e1       	ldi	r24, 0x12	; 18
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_SendMsg>
		break;
 13e:	08 95       	ret
	case 3: // comando invalid
		UART_SendMsg(invalid);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_SendMsg>
 148:	08 95       	ret

0000014a <i2c_init>:

#include "i2c.h"

void i2c_init() {
	// Configurar el registro TWBR para la frecuencia SCL
	TWBR = (uint8_t)(((F_CPU / SCL_CLOCK) - 16) / 2);
 14a:	88 e4       	ldi	r24, 0x48	; 72
 14c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWSR = 0; // Preescaler a 1
 150:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 154:	08 95       	ret

00000156 <i2c_start>:
}

void i2c_start() {
	// Enviar condición de START
	TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
 156:	84 ea       	ldi	r24, 0xA4	; 164
 158:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 15c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 160:	88 23       	and	r24, r24
 162:	e4 f7       	brge	.-8      	; 0x15c <i2c_start+0x6>
}
 164:	08 95       	ret

00000166 <i2c_stop>:

void i2c_stop() {
	// Enviar condición de STOP
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
 166:	84 e9       	ldi	r24, 0x94	; 148
 168:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 16c:	08 95       	ret

0000016e <i2c_write>:
}

void i2c_write(uint8_t data) {
	TWDR = data; // Cargar dato en el registro TWDR
 16e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWINT) | (1 << TWEN); // Iniciar transmisión
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <i2c_write+0xa>
}
 180:	08 95       	ret

00000182 <i2c_read>:

uint8_t i2c_read(uint8_t ack) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (ack << TWEA); // Configurar ACK
 182:	20 e4       	ldi	r18, 0x40	; 64
 184:	82 9f       	mul	r24, r18
 186:	c0 01       	movw	r24, r0
 188:	11 24       	eor	r1, r1
 18a:	84 68       	ori	r24, 0x84	; 132
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 << TWINT))); // Esperar a que se complete la recepción
 190:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <i2c_read+0xe>
	return TWDR; // Devolver el dato recibido
 198:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 19c:	08 95       	ret

0000019e <main>:
#include <stdio.h>
#include "uart.h"
#include "timer.h"
#include "cli.h"

int main(void) {
 19e:	cf 93       	push	r28
 1a0:	df 93       	push	r29
 1a2:	cd b7       	in	r28, 0x3d	; 61
 1a4:	de b7       	in	r29, 0x3e	; 62
 1a6:	a5 97       	sbiw	r28, 0x25	; 37
 1a8:	0f b6       	in	r0, 0x3f	; 63
 1aa:	f8 94       	cli
 1ac:	de bf       	out	0x3e, r29	; 62
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	cd bf       	out	0x3d, r28	; 61
	UART_Init(); // Inicializa el UART
 1b2:	0e 94 d6 01 	call	0x3ac	; 0x3ac <UART_Init>
	rtc_init(); // Inicializa el RTC
 1b6:	0e 94 16 01 	call	0x22c	; 0x22c <rtc_init>
	TIMER_init();
 1ba:	0e 94 81 01 	call	0x302	; 0x302 <TIMER_init>
	CLI_Init();
 1be:	0e 94 75 00 	call	0xea	; 0xea <CLI_Init>
	TIMER_Enable();
 1c2:	0e 94 90 01 	call	0x320	; 0x320 <TIMER_Enable>
	RTC_Time now;
	
	sei();
 1c6:	78 94       	sei

	while (1) {
		
		if (UART_GetCmdFlag()) // Recibo un comando
 1c8:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <UART_GetCmdFlag>
 1cc:	88 23       	and	r24, r24
 1ce:	41 f0       	breq	.+16     	; 0x1e0 <main+0x42>
		{
			UART_ClearCmdFlag();
 1d0:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <UART_ClearCmdFlag>
			CLI_cmd(UART_ReadBuffer());
 1d4:	0e 94 ee 01 	call	0x3dc	; 0x3dc <UART_ReadBuffer>
 1d8:	0e 94 7d 00 	call	0xfa	; 0xfa <CLI_cmd>
			UART_Enable_Rx();
 1dc:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Enable_Rx>
		}

		if (CLI_GetCommandFlag() && TIMER_GetClkFlag())
 1e0:	0e 94 7a 00 	call	0xf4	; 0xf4 <CLI_GetCommandFlag>
 1e4:	88 23       	and	r24, r24
 1e6:	81 f3       	breq	.-32     	; 0x1c8 <main+0x2a>
 1e8:	0e 94 a0 01 	call	0x340	; 0x340 <TIMER_GetClkFlag>
 1ec:	88 23       	and	r24, r24
 1ee:	61 f3       	breq	.-40     	; 0x1c8 <main+0x2a>
		{
			TIMER_ClearClkFlag();
 1f0:	0e 94 a3 01 	call	0x346	; 0x346 <TIMER_ClearClkFlag>
			now = rtc_get_time();
 1f4:	0e 94 24 01 	call	0x248	; 0x248 <rtc_get_time>
			char buffer[30]; // Buffer para almacenar la cadena de tiempo
			sprintf(buffer, "Hora actual: %02d:%02d:%02d\r\n", now.hours, now.minutes, now.seconds);
 1f8:	1f 92       	push	r1
 1fa:	2f 93       	push	r18
 1fc:	1f 92       	push	r1
 1fe:	3f 93       	push	r19
 200:	1f 92       	push	r1
 202:	4f 93       	push	r20
 204:	86 e6       	ldi	r24, 0x66	; 102
 206:	91 e0       	ldi	r25, 0x01	; 1
 208:	9f 93       	push	r25
 20a:	8f 93       	push	r24
 20c:	8e 01       	movw	r16, r28
 20e:	08 5f       	subi	r16, 0xF8	; 248
 210:	1f 4f       	sbci	r17, 0xFF	; 255
 212:	1f 93       	push	r17
 214:	0f 93       	push	r16
 216:	0e 94 8c 02 	call	0x518	; 0x518 <sprintf>
			UART_SendMsg(buffer); // Envía la cadena por UART
 21a:	c8 01       	movw	r24, r16
 21c:	0e 94 e6 01 	call	0x3cc	; 0x3cc <UART_SendMsg>
 220:	0f b6       	in	r0, 0x3f	; 63
 222:	f8 94       	cli
 224:	de bf       	out	0x3e, r29	; 62
 226:	0f be       	out	0x3f, r0	; 63
 228:	cd bf       	out	0x3d, r28	; 61
 22a:	ce cf       	rjmp	.-100    	; 0x1c8 <main+0x2a>

0000022c <rtc_init>:

#include "rtc.h"
#include "i2c.h"

void rtc_init() {
	i2c_init(); // Asegura que I2C está inicializado
 22c:	0e 94 a5 00 	call	0x14a	; 0x14a <i2c_init>
 230:	08 95       	ret

00000232 <bcd_to_dec>:

	return time;
}

uint8_t bcd_to_dec(uint8_t bcd) {
	return ((bcd / 16) * 10) + (bcd % 16);
 232:	98 2f       	mov	r25, r24
 234:	92 95       	swap	r25
 236:	9f 70       	andi	r25, 0x0F	; 15
 238:	99 0f       	add	r25, r25
 23a:	29 2f       	mov	r18, r25
 23c:	22 0f       	add	r18, r18
 23e:	22 0f       	add	r18, r18
 240:	92 0f       	add	r25, r18
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	89 0f       	add	r24, r25
 246:	08 95       	ret

00000248 <rtc_get_time>:

void rtc_init() {
	i2c_init(); // Asegura que I2C está inicializado
}

RTC_Time rtc_get_time() {
 248:	cf 93       	push	r28
 24a:	df 93       	push	r29
 24c:	cd b7       	in	r28, 0x3d	; 61
 24e:	de b7       	in	r29, 0x3e	; 62
 250:	2e 97       	sbiw	r28, 0x0e	; 14
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
	RTC_Time time;
	
	i2c_start();
 25c:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_WRITE); // Dirección de DS3231 + bit de escritura
 260:	80 ed       	ldi	r24, 0xD0	; 208
 262:	0e 94 b7 00 	call	0x16e	; 0x16e <i2c_write>
	i2c_write(0x00); // Establecer el registro de segundos como dirección inicial
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	0e 94 b7 00 	call	0x16e	; 0x16e <i2c_write>
	i2c_start();
 26c:	0e 94 ab 00 	call	0x156	; 0x156 <i2c_start>
	i2c_write(DS3231_ADDRESS << 1 | I2C_READ); // Dirección de DS3231 + bit de lectura
 270:	81 ed       	ldi	r24, 0xD1	; 209
 272:	0e 94 b7 00 	call	0x16e	; 0x16e <i2c_write>

	time.seconds = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 27c:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 280:	88 87       	std	Y+8, r24	; 0x08
	time.minutes = bcd_to_dec(i2c_read(1)); // Leer y enviar ACK
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 288:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 28c:	89 87       	std	Y+9, r24	; 0x09
	time.hours = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 294:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 298:	8a 87       	std	Y+10, r24	; 0x0a
	time.day = bcd_to_dec(i2c_read(1));     // Leer y enviar ACK
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 2a0:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 2a4:	8b 87       	std	Y+11, r24	; 0x0b
	time.date = bcd_to_dec(i2c_read(1));    // Leer y enviar ACK
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 2ac:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 2b0:	8c 87       	std	Y+12, r24	; 0x0c
	time.month = bcd_to_dec(i2c_read(1));   // Leer y enviar ACK
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 2b8:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 2bc:	8d 87       	std	Y+13, r24	; 0x0d
	time.year = bcd_to_dec(i2c_read(0));    // Leer y enviar NACK
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	0e 94 c1 00 	call	0x182	; 0x182 <i2c_read>
 2c4:	0e 94 19 01 	call	0x232	; 0x232 <bcd_to_dec>
 2c8:	8e 87       	std	Y+14, r24	; 0x0e

	i2c_stop(); // Enviar condición de STOP
 2ca:	0e 94 b3 00 	call	0x166	; 0x166 <i2c_stop>

	return time;
 2ce:	87 e0       	ldi	r24, 0x07	; 7
 2d0:	fe 01       	movw	r30, r28
 2d2:	38 96       	adiw	r30, 0x08	; 8
 2d4:	de 01       	movw	r26, r28
 2d6:	11 96       	adiw	r26, 0x01	; 1
 2d8:	01 90       	ld	r0, Z+
 2da:	0d 92       	st	X+, r0
 2dc:	8a 95       	dec	r24
 2de:	e1 f7       	brne	.-8      	; 0x2d8 <rtc_get_time+0x90>
 2e0:	29 81       	ldd	r18, Y+1	; 0x01
 2e2:	3a 81       	ldd	r19, Y+2	; 0x02
 2e4:	4b 81       	ldd	r20, Y+3	; 0x03
 2e6:	5c 81       	ldd	r21, Y+4	; 0x04
 2e8:	6d 81       	ldd	r22, Y+5	; 0x05
 2ea:	7e 81       	ldd	r23, Y+6	; 0x06
}
 2ec:	8f 81       	ldd	r24, Y+7	; 0x07
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	2e 96       	adiw	r28, 0x0e	; 14
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	f8 94       	cli
 2f6:	de bf       	out	0x3e, r29	; 62
 2f8:	0f be       	out	0x3f, r0	; 63
 2fa:	cd bf       	out	0x3d, r28	; 61
 2fc:	df 91       	pop	r29
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <TIMER_init>:
	flagClk = 0;
}

void TIMER_ClearCount()
{
	count = 0;
 302:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 306:	e1 e8       	ldi	r30, 0x81	; 129
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	10 82       	st	Z, r1
 30c:	80 81       	ld	r24, Z
 30e:	8b 60       	ori	r24, 0x0B	; 11
 310:	80 83       	st	Z, r24
 312:	88 ea       	ldi	r24, 0xA8	; 168
 314:	91 e6       	ldi	r25, 0x61	; 97
 316:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 31a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 31e:	08 95       	ret

00000320 <TIMER_Enable>:
 320:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7f8085>
 324:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7f8084>
 328:	ef e6       	ldi	r30, 0x6F	; 111
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	82 60       	ori	r24, 0x02	; 2
 330:	80 83       	st	Z, r24
 332:	08 95       	ret

00000334 <TIMER_Disable>:
 334:	ef e6       	ldi	r30, 0x6F	; 111
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	8d 7f       	andi	r24, 0xFD	; 253
 33c:	80 83       	st	Z, r24
 33e:	08 95       	ret

00000340 <TIMER_GetClkFlag>:
 340:	80 91 86 01 	lds	r24, 0x0186	; 0x800186 <flagClk>
 344:	08 95       	ret

00000346 <TIMER_ClearClkFlag>:
 346:	10 92 86 01 	sts	0x0186, r1	; 0x800186 <flagClk>
 34a:	08 95       	ret

0000034c <__vector_11>:
}

// Rutina de servicio para el timer que se activa "On Compare Match", definido en el timer a 100ms
ISR(TIMER1_COMPA_vect)
{
 34c:	1f 92       	push	r1
 34e:	0f 92       	push	r0
 350:	0f b6       	in	r0, 0x3f	; 63
 352:	0f 92       	push	r0
 354:	11 24       	eor	r1, r1
 356:	8f 93       	push	r24
	count++;
 358:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <count>
 35c:	8f 5f       	subi	r24, 0xFF	; 255
 35e:	80 93 85 01 	sts	0x0185, r24	; 0x800185 <count>
	// 1 segundo
	if (count == 10)
 362:	8a 30       	cpi	r24, 0x0A	; 10
 364:	29 f4       	brne	.+10     	; 0x370 <__vector_11+0x24>
	{
		count = 0;
 366:	10 92 85 01 	sts	0x0185, r1	; 0x800185 <count>
		flagClk = 1;
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <flagClk>
	}
}
 370:	8f 91       	pop	r24
 372:	0f 90       	pop	r0
 374:	0f be       	out	0x3f, r0	; 63
 376:	0f 90       	pop	r0
 378:	1f 90       	pop	r1
 37a:	18 95       	reti

0000037c <UART_Disable_Rx>:
/*
 * Control de interrupciones de transmision y recepcion
 */
void UART_Disable_Rx()
{
	UCSR0B &= ~(1 << RXCIE0);
 37c:	e1 ec       	ldi	r30, 0xC1	; 193
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	8f 77       	andi	r24, 0x7F	; 127
 384:	80 83       	st	Z, r24
 386:	08 95       	ret

00000388 <UART_Enable_Rx>:
}

void UART_Enable_Rx()
{
	UCSR0B |= (1 << RXCIE0);
 388:	e1 ec       	ldi	r30, 0xC1	; 193
 38a:	f0 e0       	ldi	r31, 0x00	; 0
 38c:	80 81       	ld	r24, Z
 38e:	80 68       	ori	r24, 0x80	; 128
 390:	80 83       	st	Z, r24
 392:	08 95       	ret

00000394 <UART_Disable_Tx>:
}

void UART_Disable_Tx()
{
	UCSR0B &= ~(1 << UDRIE0);
 394:	e1 ec       	ldi	r30, 0xC1	; 193
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	80 81       	ld	r24, Z
 39a:	8f 7d       	andi	r24, 0xDF	; 223
 39c:	80 83       	st	Z, r24
 39e:	08 95       	ret

000003a0 <UART_Enable_Tx>:
}

void UART_Enable_Tx()
{
	UCSR0B |= (1 << UDRIE0);
 3a0:	e1 ec       	ldi	r30, 0xC1	; 193
 3a2:	f0 e0       	ldi	r31, 0x00	; 0
 3a4:	80 81       	ld	r24, Z
 3a6:	80 62       	ori	r24, 0x20	; 32
 3a8:	80 83       	st	Z, r24
 3aa:	08 95       	ret

000003ac <UART_Init>:
uint8_t cmd_flag = 0;

void UART_Init()
{
	// Establecer baud rate
	UBRR0H = BAUD_PRESCALER >> 8;
 3ac:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = BAUD_PRESCALER;
 3b0:	87 e6       	ldi	r24, 0x67	; 103
 3b2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>

	// Establecer formato de trama
	UCSR0C = ASYNCHRONOUS | PARITY_MODE | STOP_BIT | DATA_BIT;
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>

	/*Permitir que la USART sobreescriba la operacion normal en los pines TX y RX*/
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
 3bc:	88 e1       	ldi	r24, 0x18	; 24
 3be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	// Activar interrupciones para la recepcion
	UART_Enable_Rx();
 3c2:	0e 94 c4 01 	call	0x388	; 0x388 <UART_Enable_Rx>
	UART_Enable_Tx();
 3c6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_Enable_Tx>
 3ca:	08 95       	ret

000003cc <UART_SendMsg>:
	UCSR0B |= (1 << UDRIE0);
}

void UART_SendMsg(char *msg)
{
	strcpy(buffer_tx, msg);
 3cc:	bc 01       	movw	r22, r24
 3ce:	84 e9       	ldi	r24, 0x94	; 148
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 85 02 	call	0x50a	; 0x50a <strcpy>
	UART_Enable_Tx();
 3d6:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <UART_Enable_Tx>
 3da:	08 95       	ret

000003dc <UART_ReadBuffer>:
 * Lee el buffer de la UART
 */
char *UART_ReadBuffer()
{
	return buffer_rx;
}
 3dc:	8a e8       	ldi	r24, 0x8A	; 138
 3de:	91 e0       	ldi	r25, 0x01	; 1
 3e0:	08 95       	ret

000003e2 <UART_GetCmdFlag>:

uint8_t UART_GetCmdFlag()
{
	return cmd_flag;
}
 3e2:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <cmd_flag>
 3e6:	08 95       	ret

000003e8 <UART_ClearCmdFlag>:

void UART_ClearCmdFlag()
{
	cmd_flag = 0;
 3e8:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <cmd_flag>
 3ec:	08 95       	ret

000003ee <__vector_18>:
/*
 * Interrupcion de recepcion
 * Disparada por la UART cuando el buffer esta listo para ser leido
 */
ISR(USART_RX_vect)
{
 3ee:	1f 92       	push	r1
 3f0:	0f 92       	push	r0
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	0f 92       	push	r0
 3f6:	11 24       	eor	r1, r1
 3f8:	2f 93       	push	r18
 3fa:	3f 93       	push	r19
 3fc:	4f 93       	push	r20
 3fe:	5f 93       	push	r21
 400:	6f 93       	push	r22
 402:	7f 93       	push	r23
 404:	8f 93       	push	r24
 406:	9f 93       	push	r25
 408:	af 93       	push	r26
 40a:	bf 93       	push	r27
 40c:	ef 93       	push	r30
 40e:	ff 93       	push	r31
	static volatile uint8_t i = 0;
	unsigned char dato;

	dato = UDR0;
 410:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

	/* Detectar fin de linea */
	if (dato == '\r')
 414:	8d 30       	cpi	r24, 0x0D	; 13
 416:	71 f4       	brne	.+28     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
	{
		buffer_rx[i] = '\0';
 418:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <i.2258>
 41c:	f0 e0       	ldi	r31, 0x00	; 0
 41e:	e6 57       	subi	r30, 0x76	; 118
 420:	fe 4f       	sbci	r31, 0xFE	; 254
 422:	10 82       	st	Z, r1
		i = 0;
 424:	10 92 88 01 	sts	0x0188, r1	; 0x800188 <i.2258>
		cmd_flag = 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	80 93 89 01 	sts	0x0189, r24	; 0x800189 <cmd_flag>
		UART_Disable_Rx();
 42e:	0e 94 be 01 	call	0x37c	; 0x37c <UART_Disable_Rx>
 432:	13 c0       	rjmp	.+38     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
	}
	/* Detectar borrado de caracter */
	else
	{
		if (dato == '\b')
 434:	88 30       	cpi	r24, 0x08	; 8
 436:	31 f4       	brne	.+12     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
			i--;
 438:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <i.2258>
 43c:	81 50       	subi	r24, 0x01	; 1
 43e:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <i.2258>
 442:	0b c0       	rjmp	.+22     	; 0x45a <__EEPROM_REGION_LENGTH__+0x5a>
		else
		{
			buffer_rx[i] = dato;
 444:	e0 91 88 01 	lds	r30, 0x0188	; 0x800188 <i.2258>
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	e6 57       	subi	r30, 0x76	; 118
 44c:	fe 4f       	sbci	r31, 0xFE	; 254
 44e:	80 83       	st	Z, r24
			i++;
 450:	80 91 88 01 	lds	r24, 0x0188	; 0x800188 <i.2258>
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 88 01 	sts	0x0188, r24	; 0x800188 <i.2258>
		}
	}
}
 45a:	ff 91       	pop	r31
 45c:	ef 91       	pop	r30
 45e:	bf 91       	pop	r27
 460:	af 91       	pop	r26
 462:	9f 91       	pop	r25
 464:	8f 91       	pop	r24
 466:	7f 91       	pop	r23
 468:	6f 91       	pop	r22
 46a:	5f 91       	pop	r21
 46c:	4f 91       	pop	r20
 46e:	3f 91       	pop	r19
 470:	2f 91       	pop	r18
 472:	0f 90       	pop	r0
 474:	0f be       	out	0x3f, r0	; 63
 476:	0f 90       	pop	r0
 478:	1f 90       	pop	r1
 47a:	18 95       	reti

0000047c <__vector_19>:
This bit is set when the transmit buffer is empty, and cleared when the transmit buffer
contains data to be transmitted that has not yet been moved into the shift register.
* Cargo el caracter de mensaje a enviar hasta alcanzar el fin del mensaje
*/
ISR(USART_UDRE_vect)
{
 47c:	1f 92       	push	r1
 47e:	0f 92       	push	r0
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	0f 92       	push	r0
 484:	11 24       	eor	r1, r1
 486:	2f 93       	push	r18
 488:	3f 93       	push	r19
 48a:	4f 93       	push	r20
 48c:	5f 93       	push	r21
 48e:	6f 93       	push	r22
 490:	7f 93       	push	r23
 492:	8f 93       	push	r24
 494:	9f 93       	push	r25
 496:	af 93       	push	r26
 498:	bf 93       	push	r27
 49a:	ef 93       	push	r30
 49c:	ff 93       	push	r31
	cli();
 49e:	f8 94       	cli
	static volatile uint8_t i = 0;
	if (buffer_tx[i] != '\0')
 4a0:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <i.2265>
 4a4:	f0 e0       	ldi	r31, 0x00	; 0
 4a6:	ec 56       	subi	r30, 0x6C	; 108
 4a8:	fe 4f       	sbci	r31, 0xFE	; 254
 4aa:	80 81       	ld	r24, Z
 4ac:	88 23       	and	r24, r24
 4ae:	71 f0       	breq	.+28     	; 0x4cc <__vector_19+0x50>
	{
		UDR0 = buffer_tx[i];
 4b0:	e0 91 87 01 	lds	r30, 0x0187	; 0x800187 <i.2265>
 4b4:	f0 e0       	ldi	r31, 0x00	; 0
 4b6:	ec 56       	subi	r30, 0x6C	; 108
 4b8:	fe 4f       	sbci	r31, 0xFE	; 254
 4ba:	80 81       	ld	r24, Z
 4bc:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
		i++;
 4c0:	80 91 87 01 	lds	r24, 0x0187	; 0x800187 <i.2265>
 4c4:	8f 5f       	subi	r24, 0xFF	; 255
 4c6:	80 93 87 01 	sts	0x0187, r24	; 0x800187 <i.2265>
 4ca:	04 c0       	rjmp	.+8      	; 0x4d4 <__vector_19+0x58>
	}
	else
	{
		i = 0;
 4cc:	10 92 87 01 	sts	0x0187, r1	; 0x800187 <i.2265>
		// al no escribir el registro udr0 es necesario desactivar
		// las interrupciones para evitar que se produzca otra interrupcion
		UART_Disable_Tx();
 4d0:	0e 94 ca 01 	call	0x394	; 0x394 <UART_Disable_Tx>
	}
	sei();
 4d4:	78 94       	sei
 4d6:	ff 91       	pop	r31
 4d8:	ef 91       	pop	r30
 4da:	bf 91       	pop	r27
 4dc:	af 91       	pop	r26
 4de:	9f 91       	pop	r25
 4e0:	8f 91       	pop	r24
 4e2:	7f 91       	pop	r23
 4e4:	6f 91       	pop	r22
 4e6:	5f 91       	pop	r21
 4e8:	4f 91       	pop	r20
 4ea:	3f 91       	pop	r19
 4ec:	2f 91       	pop	r18
 4ee:	0f 90       	pop	r0
 4f0:	0f be       	out	0x3f, r0	; 63
 4f2:	0f 90       	pop	r0
 4f4:	1f 90       	pop	r1
 4f6:	18 95       	reti

000004f8 <strcmp>:
 4f8:	fb 01       	movw	r30, r22
 4fa:	dc 01       	movw	r26, r24
 4fc:	8d 91       	ld	r24, X+
 4fe:	01 90       	ld	r0, Z+
 500:	80 19       	sub	r24, r0
 502:	01 10       	cpse	r0, r1
 504:	d9 f3       	breq	.-10     	; 0x4fc <strcmp+0x4>
 506:	99 0b       	sbc	r25, r25
 508:	08 95       	ret

0000050a <strcpy>:
 50a:	fb 01       	movw	r30, r22
 50c:	dc 01       	movw	r26, r24
 50e:	01 90       	ld	r0, Z+
 510:	0d 92       	st	X+, r0
 512:	00 20       	and	r0, r0
 514:	e1 f7       	brne	.-8      	; 0x50e <strcpy+0x4>
 516:	08 95       	ret

00000518 <sprintf>:
 518:	ae e0       	ldi	r26, 0x0E	; 14
 51a:	b0 e0       	ldi	r27, 0x00	; 0
 51c:	e2 e9       	ldi	r30, 0x92	; 146
 51e:	f2 e0       	ldi	r31, 0x02	; 2
 520:	0c 94 4d 05 	jmp	0xa9a	; 0xa9a <__prologue_saves__+0x1c>
 524:	0d 89       	ldd	r16, Y+21	; 0x15
 526:	1e 89       	ldd	r17, Y+22	; 0x16
 528:	86 e0       	ldi	r24, 0x06	; 6
 52a:	8c 83       	std	Y+4, r24	; 0x04
 52c:	1a 83       	std	Y+2, r17	; 0x02
 52e:	09 83       	std	Y+1, r16	; 0x01
 530:	8f ef       	ldi	r24, 0xFF	; 255
 532:	9f e7       	ldi	r25, 0x7F	; 127
 534:	9e 83       	std	Y+6, r25	; 0x06
 536:	8d 83       	std	Y+5, r24	; 0x05
 538:	ae 01       	movw	r20, r28
 53a:	47 5e       	subi	r20, 0xE7	; 231
 53c:	5f 4f       	sbci	r21, 0xFF	; 255
 53e:	6f 89       	ldd	r22, Y+23	; 0x17
 540:	78 8d       	ldd	r23, Y+24	; 0x18
 542:	ce 01       	movw	r24, r28
 544:	01 96       	adiw	r24, 0x01	; 1
 546:	0e 94 ae 02 	call	0x55c	; 0x55c <vfprintf>
 54a:	ef 81       	ldd	r30, Y+7	; 0x07
 54c:	f8 85       	ldd	r31, Y+8	; 0x08
 54e:	e0 0f       	add	r30, r16
 550:	f1 1f       	adc	r31, r17
 552:	10 82       	st	Z, r1
 554:	2e 96       	adiw	r28, 0x0e	; 14
 556:	e4 e0       	ldi	r30, 0x04	; 4
 558:	0c 94 69 05 	jmp	0xad2	; 0xad2 <__epilogue_restores__+0x1c>

0000055c <vfprintf>:
 55c:	ab e0       	ldi	r26, 0x0B	; 11
 55e:	b0 e0       	ldi	r27, 0x00	; 0
 560:	e4 eb       	ldi	r30, 0xB4	; 180
 562:	f2 e0       	ldi	r31, 0x02	; 2
 564:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__prologue_saves__>
 568:	6c 01       	movw	r12, r24
 56a:	7b 01       	movw	r14, r22
 56c:	8a 01       	movw	r16, r20
 56e:	fc 01       	movw	r30, r24
 570:	17 82       	std	Z+7, r1	; 0x07
 572:	16 82       	std	Z+6, r1	; 0x06
 574:	83 81       	ldd	r24, Z+3	; 0x03
 576:	81 ff       	sbrs	r24, 1
 578:	cc c1       	rjmp	.+920    	; 0x912 <__stack+0x13>
 57a:	ce 01       	movw	r24, r28
 57c:	01 96       	adiw	r24, 0x01	; 1
 57e:	3c 01       	movw	r6, r24
 580:	f6 01       	movw	r30, r12
 582:	93 81       	ldd	r25, Z+3	; 0x03
 584:	f7 01       	movw	r30, r14
 586:	93 fd       	sbrc	r25, 3
 588:	85 91       	lpm	r24, Z+
 58a:	93 ff       	sbrs	r25, 3
 58c:	81 91       	ld	r24, Z+
 58e:	7f 01       	movw	r14, r30
 590:	88 23       	and	r24, r24
 592:	09 f4       	brne	.+2      	; 0x596 <vfprintf+0x3a>
 594:	ba c1       	rjmp	.+884    	; 0x90a <__stack+0xb>
 596:	85 32       	cpi	r24, 0x25	; 37
 598:	39 f4       	brne	.+14     	; 0x5a8 <vfprintf+0x4c>
 59a:	93 fd       	sbrc	r25, 3
 59c:	85 91       	lpm	r24, Z+
 59e:	93 ff       	sbrs	r25, 3
 5a0:	81 91       	ld	r24, Z+
 5a2:	7f 01       	movw	r14, r30
 5a4:	85 32       	cpi	r24, 0x25	; 37
 5a6:	29 f4       	brne	.+10     	; 0x5b2 <vfprintf+0x56>
 5a8:	b6 01       	movw	r22, r12
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 5b0:	e7 cf       	rjmp	.-50     	; 0x580 <vfprintf+0x24>
 5b2:	91 2c       	mov	r9, r1
 5b4:	21 2c       	mov	r2, r1
 5b6:	31 2c       	mov	r3, r1
 5b8:	ff e1       	ldi	r31, 0x1F	; 31
 5ba:	f3 15       	cp	r31, r3
 5bc:	d8 f0       	brcs	.+54     	; 0x5f4 <vfprintf+0x98>
 5be:	8b 32       	cpi	r24, 0x2B	; 43
 5c0:	79 f0       	breq	.+30     	; 0x5e0 <vfprintf+0x84>
 5c2:	38 f4       	brcc	.+14     	; 0x5d2 <vfprintf+0x76>
 5c4:	80 32       	cpi	r24, 0x20	; 32
 5c6:	79 f0       	breq	.+30     	; 0x5e6 <vfprintf+0x8a>
 5c8:	83 32       	cpi	r24, 0x23	; 35
 5ca:	a1 f4       	brne	.+40     	; 0x5f4 <vfprintf+0x98>
 5cc:	23 2d       	mov	r18, r3
 5ce:	20 61       	ori	r18, 0x10	; 16
 5d0:	1d c0       	rjmp	.+58     	; 0x60c <vfprintf+0xb0>
 5d2:	8d 32       	cpi	r24, 0x2D	; 45
 5d4:	61 f0       	breq	.+24     	; 0x5ee <vfprintf+0x92>
 5d6:	80 33       	cpi	r24, 0x30	; 48
 5d8:	69 f4       	brne	.+26     	; 0x5f4 <vfprintf+0x98>
 5da:	23 2d       	mov	r18, r3
 5dc:	21 60       	ori	r18, 0x01	; 1
 5de:	16 c0       	rjmp	.+44     	; 0x60c <vfprintf+0xb0>
 5e0:	83 2d       	mov	r24, r3
 5e2:	82 60       	ori	r24, 0x02	; 2
 5e4:	38 2e       	mov	r3, r24
 5e6:	e3 2d       	mov	r30, r3
 5e8:	e4 60       	ori	r30, 0x04	; 4
 5ea:	3e 2e       	mov	r3, r30
 5ec:	2a c0       	rjmp	.+84     	; 0x642 <vfprintf+0xe6>
 5ee:	f3 2d       	mov	r31, r3
 5f0:	f8 60       	ori	r31, 0x08	; 8
 5f2:	1d c0       	rjmp	.+58     	; 0x62e <vfprintf+0xd2>
 5f4:	37 fc       	sbrc	r3, 7
 5f6:	2d c0       	rjmp	.+90     	; 0x652 <vfprintf+0xf6>
 5f8:	20 ed       	ldi	r18, 0xD0	; 208
 5fa:	28 0f       	add	r18, r24
 5fc:	2a 30       	cpi	r18, 0x0A	; 10
 5fe:	40 f0       	brcs	.+16     	; 0x610 <vfprintf+0xb4>
 600:	8e 32       	cpi	r24, 0x2E	; 46
 602:	b9 f4       	brne	.+46     	; 0x632 <vfprintf+0xd6>
 604:	36 fc       	sbrc	r3, 6
 606:	81 c1       	rjmp	.+770    	; 0x90a <__stack+0xb>
 608:	23 2d       	mov	r18, r3
 60a:	20 64       	ori	r18, 0x40	; 64
 60c:	32 2e       	mov	r3, r18
 60e:	19 c0       	rjmp	.+50     	; 0x642 <vfprintf+0xe6>
 610:	36 fe       	sbrs	r3, 6
 612:	06 c0       	rjmp	.+12     	; 0x620 <vfprintf+0xc4>
 614:	8a e0       	ldi	r24, 0x0A	; 10
 616:	98 9e       	mul	r9, r24
 618:	20 0d       	add	r18, r0
 61a:	11 24       	eor	r1, r1
 61c:	92 2e       	mov	r9, r18
 61e:	11 c0       	rjmp	.+34     	; 0x642 <vfprintf+0xe6>
 620:	ea e0       	ldi	r30, 0x0A	; 10
 622:	2e 9e       	mul	r2, r30
 624:	20 0d       	add	r18, r0
 626:	11 24       	eor	r1, r1
 628:	22 2e       	mov	r2, r18
 62a:	f3 2d       	mov	r31, r3
 62c:	f0 62       	ori	r31, 0x20	; 32
 62e:	3f 2e       	mov	r3, r31
 630:	08 c0       	rjmp	.+16     	; 0x642 <vfprintf+0xe6>
 632:	8c 36       	cpi	r24, 0x6C	; 108
 634:	21 f4       	brne	.+8      	; 0x63e <vfprintf+0xe2>
 636:	83 2d       	mov	r24, r3
 638:	80 68       	ori	r24, 0x80	; 128
 63a:	38 2e       	mov	r3, r24
 63c:	02 c0       	rjmp	.+4      	; 0x642 <vfprintf+0xe6>
 63e:	88 36       	cpi	r24, 0x68	; 104
 640:	41 f4       	brne	.+16     	; 0x652 <vfprintf+0xf6>
 642:	f7 01       	movw	r30, r14
 644:	93 fd       	sbrc	r25, 3
 646:	85 91       	lpm	r24, Z+
 648:	93 ff       	sbrs	r25, 3
 64a:	81 91       	ld	r24, Z+
 64c:	7f 01       	movw	r14, r30
 64e:	81 11       	cpse	r24, r1
 650:	b3 cf       	rjmp	.-154    	; 0x5b8 <vfprintf+0x5c>
 652:	98 2f       	mov	r25, r24
 654:	9f 7d       	andi	r25, 0xDF	; 223
 656:	95 54       	subi	r25, 0x45	; 69
 658:	93 30       	cpi	r25, 0x03	; 3
 65a:	28 f4       	brcc	.+10     	; 0x666 <vfprintf+0x10a>
 65c:	0c 5f       	subi	r16, 0xFC	; 252
 65e:	1f 4f       	sbci	r17, 0xFF	; 255
 660:	9f e3       	ldi	r25, 0x3F	; 63
 662:	99 83       	std	Y+1, r25	; 0x01
 664:	0d c0       	rjmp	.+26     	; 0x680 <vfprintf+0x124>
 666:	83 36       	cpi	r24, 0x63	; 99
 668:	31 f0       	breq	.+12     	; 0x676 <vfprintf+0x11a>
 66a:	83 37       	cpi	r24, 0x73	; 115
 66c:	71 f0       	breq	.+28     	; 0x68a <vfprintf+0x12e>
 66e:	83 35       	cpi	r24, 0x53	; 83
 670:	09 f0       	breq	.+2      	; 0x674 <vfprintf+0x118>
 672:	59 c0       	rjmp	.+178    	; 0x726 <vfprintf+0x1ca>
 674:	21 c0       	rjmp	.+66     	; 0x6b8 <vfprintf+0x15c>
 676:	f8 01       	movw	r30, r16
 678:	80 81       	ld	r24, Z
 67a:	89 83       	std	Y+1, r24	; 0x01
 67c:	0e 5f       	subi	r16, 0xFE	; 254
 67e:	1f 4f       	sbci	r17, 0xFF	; 255
 680:	88 24       	eor	r8, r8
 682:	83 94       	inc	r8
 684:	91 2c       	mov	r9, r1
 686:	53 01       	movw	r10, r6
 688:	13 c0       	rjmp	.+38     	; 0x6b0 <vfprintf+0x154>
 68a:	28 01       	movw	r4, r16
 68c:	f2 e0       	ldi	r31, 0x02	; 2
 68e:	4f 0e       	add	r4, r31
 690:	51 1c       	adc	r5, r1
 692:	f8 01       	movw	r30, r16
 694:	a0 80       	ld	r10, Z
 696:	b1 80       	ldd	r11, Z+1	; 0x01
 698:	36 fe       	sbrs	r3, 6
 69a:	03 c0       	rjmp	.+6      	; 0x6a2 <vfprintf+0x146>
 69c:	69 2d       	mov	r22, r9
 69e:	70 e0       	ldi	r23, 0x00	; 0
 6a0:	02 c0       	rjmp	.+4      	; 0x6a6 <vfprintf+0x14a>
 6a2:	6f ef       	ldi	r22, 0xFF	; 255
 6a4:	7f ef       	ldi	r23, 0xFF	; 255
 6a6:	c5 01       	movw	r24, r10
 6a8:	0e 94 9a 04 	call	0x934	; 0x934 <strnlen>
 6ac:	4c 01       	movw	r8, r24
 6ae:	82 01       	movw	r16, r4
 6b0:	f3 2d       	mov	r31, r3
 6b2:	ff 77       	andi	r31, 0x7F	; 127
 6b4:	3f 2e       	mov	r3, r31
 6b6:	16 c0       	rjmp	.+44     	; 0x6e4 <vfprintf+0x188>
 6b8:	28 01       	movw	r4, r16
 6ba:	22 e0       	ldi	r18, 0x02	; 2
 6bc:	42 0e       	add	r4, r18
 6be:	51 1c       	adc	r5, r1
 6c0:	f8 01       	movw	r30, r16
 6c2:	a0 80       	ld	r10, Z
 6c4:	b1 80       	ldd	r11, Z+1	; 0x01
 6c6:	36 fe       	sbrs	r3, 6
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <vfprintf+0x174>
 6ca:	69 2d       	mov	r22, r9
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0x178>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	7f ef       	ldi	r23, 0xFF	; 255
 6d4:	c5 01       	movw	r24, r10
 6d6:	0e 94 8f 04 	call	0x91e	; 0x91e <strnlen_P>
 6da:	4c 01       	movw	r8, r24
 6dc:	f3 2d       	mov	r31, r3
 6de:	f0 68       	ori	r31, 0x80	; 128
 6e0:	3f 2e       	mov	r3, r31
 6e2:	82 01       	movw	r16, r4
 6e4:	33 fc       	sbrc	r3, 3
 6e6:	1b c0       	rjmp	.+54     	; 0x71e <vfprintf+0x1c2>
 6e8:	82 2d       	mov	r24, r2
 6ea:	90 e0       	ldi	r25, 0x00	; 0
 6ec:	88 16       	cp	r8, r24
 6ee:	99 06       	cpc	r9, r25
 6f0:	b0 f4       	brcc	.+44     	; 0x71e <vfprintf+0x1c2>
 6f2:	b6 01       	movw	r22, r12
 6f4:	80 e2       	ldi	r24, 0x20	; 32
 6f6:	90 e0       	ldi	r25, 0x00	; 0
 6f8:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 6fc:	2a 94       	dec	r2
 6fe:	f4 cf       	rjmp	.-24     	; 0x6e8 <vfprintf+0x18c>
 700:	f5 01       	movw	r30, r10
 702:	37 fc       	sbrc	r3, 7
 704:	85 91       	lpm	r24, Z+
 706:	37 fe       	sbrs	r3, 7
 708:	81 91       	ld	r24, Z+
 70a:	5f 01       	movw	r10, r30
 70c:	b6 01       	movw	r22, r12
 70e:	90 e0       	ldi	r25, 0x00	; 0
 710:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 714:	21 10       	cpse	r2, r1
 716:	2a 94       	dec	r2
 718:	21 e0       	ldi	r18, 0x01	; 1
 71a:	82 1a       	sub	r8, r18
 71c:	91 08       	sbc	r9, r1
 71e:	81 14       	cp	r8, r1
 720:	91 04       	cpc	r9, r1
 722:	71 f7       	brne	.-36     	; 0x700 <vfprintf+0x1a4>
 724:	e8 c0       	rjmp	.+464    	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 726:	84 36       	cpi	r24, 0x64	; 100
 728:	11 f0       	breq	.+4      	; 0x72e <vfprintf+0x1d2>
 72a:	89 36       	cpi	r24, 0x69	; 105
 72c:	41 f5       	brne	.+80     	; 0x77e <vfprintf+0x222>
 72e:	f8 01       	movw	r30, r16
 730:	37 fe       	sbrs	r3, 7
 732:	07 c0       	rjmp	.+14     	; 0x742 <vfprintf+0x1e6>
 734:	60 81       	ld	r22, Z
 736:	71 81       	ldd	r23, Z+1	; 0x01
 738:	82 81       	ldd	r24, Z+2	; 0x02
 73a:	93 81       	ldd	r25, Z+3	; 0x03
 73c:	0c 5f       	subi	r16, 0xFC	; 252
 73e:	1f 4f       	sbci	r17, 0xFF	; 255
 740:	08 c0       	rjmp	.+16     	; 0x752 <vfprintf+0x1f6>
 742:	60 81       	ld	r22, Z
 744:	71 81       	ldd	r23, Z+1	; 0x01
 746:	07 2e       	mov	r0, r23
 748:	00 0c       	add	r0, r0
 74a:	88 0b       	sbc	r24, r24
 74c:	99 0b       	sbc	r25, r25
 74e:	0e 5f       	subi	r16, 0xFE	; 254
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	f3 2d       	mov	r31, r3
 754:	ff 76       	andi	r31, 0x6F	; 111
 756:	3f 2e       	mov	r3, r31
 758:	97 ff       	sbrs	r25, 7
 75a:	09 c0       	rjmp	.+18     	; 0x76e <vfprintf+0x212>
 75c:	90 95       	com	r25
 75e:	80 95       	com	r24
 760:	70 95       	com	r23
 762:	61 95       	neg	r22
 764:	7f 4f       	sbci	r23, 0xFF	; 255
 766:	8f 4f       	sbci	r24, 0xFF	; 255
 768:	9f 4f       	sbci	r25, 0xFF	; 255
 76a:	f0 68       	ori	r31, 0x80	; 128
 76c:	3f 2e       	mov	r3, r31
 76e:	2a e0       	ldi	r18, 0x0A	; 10
 770:	30 e0       	ldi	r19, 0x00	; 0
 772:	a3 01       	movw	r20, r6
 774:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__ultoa_invert>
 778:	88 2e       	mov	r8, r24
 77a:	86 18       	sub	r8, r6
 77c:	45 c0       	rjmp	.+138    	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 77e:	85 37       	cpi	r24, 0x75	; 117
 780:	31 f4       	brne	.+12     	; 0x78e <vfprintf+0x232>
 782:	23 2d       	mov	r18, r3
 784:	2f 7e       	andi	r18, 0xEF	; 239
 786:	b2 2e       	mov	r11, r18
 788:	2a e0       	ldi	r18, 0x0A	; 10
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	25 c0       	rjmp	.+74     	; 0x7d8 <vfprintf+0x27c>
 78e:	93 2d       	mov	r25, r3
 790:	99 7f       	andi	r25, 0xF9	; 249
 792:	b9 2e       	mov	r11, r25
 794:	8f 36       	cpi	r24, 0x6F	; 111
 796:	c1 f0       	breq	.+48     	; 0x7c8 <vfprintf+0x26c>
 798:	18 f4       	brcc	.+6      	; 0x7a0 <vfprintf+0x244>
 79a:	88 35       	cpi	r24, 0x58	; 88
 79c:	79 f0       	breq	.+30     	; 0x7bc <vfprintf+0x260>
 79e:	b5 c0       	rjmp	.+362    	; 0x90a <__stack+0xb>
 7a0:	80 37       	cpi	r24, 0x70	; 112
 7a2:	19 f0       	breq	.+6      	; 0x7aa <vfprintf+0x24e>
 7a4:	88 37       	cpi	r24, 0x78	; 120
 7a6:	21 f0       	breq	.+8      	; 0x7b0 <vfprintf+0x254>
 7a8:	b0 c0       	rjmp	.+352    	; 0x90a <__stack+0xb>
 7aa:	e9 2f       	mov	r30, r25
 7ac:	e0 61       	ori	r30, 0x10	; 16
 7ae:	be 2e       	mov	r11, r30
 7b0:	b4 fe       	sbrs	r11, 4
 7b2:	0d c0       	rjmp	.+26     	; 0x7ce <vfprintf+0x272>
 7b4:	fb 2d       	mov	r31, r11
 7b6:	f4 60       	ori	r31, 0x04	; 4
 7b8:	bf 2e       	mov	r11, r31
 7ba:	09 c0       	rjmp	.+18     	; 0x7ce <vfprintf+0x272>
 7bc:	34 fe       	sbrs	r3, 4
 7be:	0a c0       	rjmp	.+20     	; 0x7d4 <vfprintf+0x278>
 7c0:	29 2f       	mov	r18, r25
 7c2:	26 60       	ori	r18, 0x06	; 6
 7c4:	b2 2e       	mov	r11, r18
 7c6:	06 c0       	rjmp	.+12     	; 0x7d4 <vfprintf+0x278>
 7c8:	28 e0       	ldi	r18, 0x08	; 8
 7ca:	30 e0       	ldi	r19, 0x00	; 0
 7cc:	05 c0       	rjmp	.+10     	; 0x7d8 <vfprintf+0x27c>
 7ce:	20 e1       	ldi	r18, 0x10	; 16
 7d0:	30 e0       	ldi	r19, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <vfprintf+0x27c>
 7d4:	20 e1       	ldi	r18, 0x10	; 16
 7d6:	32 e0       	ldi	r19, 0x02	; 2
 7d8:	f8 01       	movw	r30, r16
 7da:	b7 fe       	sbrs	r11, 7
 7dc:	07 c0       	rjmp	.+14     	; 0x7ec <vfprintf+0x290>
 7de:	60 81       	ld	r22, Z
 7e0:	71 81       	ldd	r23, Z+1	; 0x01
 7e2:	82 81       	ldd	r24, Z+2	; 0x02
 7e4:	93 81       	ldd	r25, Z+3	; 0x03
 7e6:	0c 5f       	subi	r16, 0xFC	; 252
 7e8:	1f 4f       	sbci	r17, 0xFF	; 255
 7ea:	06 c0       	rjmp	.+12     	; 0x7f8 <vfprintf+0x29c>
 7ec:	60 81       	ld	r22, Z
 7ee:	71 81       	ldd	r23, Z+1	; 0x01
 7f0:	80 e0       	ldi	r24, 0x00	; 0
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 5f       	subi	r16, 0xFE	; 254
 7f6:	1f 4f       	sbci	r17, 0xFF	; 255
 7f8:	a3 01       	movw	r20, r6
 7fa:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__ultoa_invert>
 7fe:	88 2e       	mov	r8, r24
 800:	86 18       	sub	r8, r6
 802:	fb 2d       	mov	r31, r11
 804:	ff 77       	andi	r31, 0x7F	; 127
 806:	3f 2e       	mov	r3, r31
 808:	36 fe       	sbrs	r3, 6
 80a:	0d c0       	rjmp	.+26     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 80c:	23 2d       	mov	r18, r3
 80e:	2e 7f       	andi	r18, 0xFE	; 254
 810:	a2 2e       	mov	r10, r18
 812:	89 14       	cp	r8, r9
 814:	58 f4       	brcc	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
 816:	34 fe       	sbrs	r3, 4
 818:	0b c0       	rjmp	.+22     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 81a:	32 fc       	sbrc	r3, 2
 81c:	09 c0       	rjmp	.+18     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 81e:	83 2d       	mov	r24, r3
 820:	8e 7e       	andi	r24, 0xEE	; 238
 822:	a8 2e       	mov	r10, r24
 824:	05 c0       	rjmp	.+10     	; 0x830 <__DATA_REGION_LENGTH__+0x30>
 826:	b8 2c       	mov	r11, r8
 828:	a3 2c       	mov	r10, r3
 82a:	03 c0       	rjmp	.+6      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 82c:	b8 2c       	mov	r11, r8
 82e:	01 c0       	rjmp	.+2      	; 0x832 <__DATA_REGION_LENGTH__+0x32>
 830:	b9 2c       	mov	r11, r9
 832:	a4 fe       	sbrs	r10, 4
 834:	0f c0       	rjmp	.+30     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 836:	fe 01       	movw	r30, r28
 838:	e8 0d       	add	r30, r8
 83a:	f1 1d       	adc	r31, r1
 83c:	80 81       	ld	r24, Z
 83e:	80 33       	cpi	r24, 0x30	; 48
 840:	21 f4       	brne	.+8      	; 0x84a <__DATA_REGION_LENGTH__+0x4a>
 842:	9a 2d       	mov	r25, r10
 844:	99 7e       	andi	r25, 0xE9	; 233
 846:	a9 2e       	mov	r10, r25
 848:	09 c0       	rjmp	.+18     	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 84a:	a2 fe       	sbrs	r10, 2
 84c:	06 c0       	rjmp	.+12     	; 0x85a <__DATA_REGION_LENGTH__+0x5a>
 84e:	b3 94       	inc	r11
 850:	b3 94       	inc	r11
 852:	04 c0       	rjmp	.+8      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 854:	8a 2d       	mov	r24, r10
 856:	86 78       	andi	r24, 0x86	; 134
 858:	09 f0       	breq	.+2      	; 0x85c <__DATA_REGION_LENGTH__+0x5c>
 85a:	b3 94       	inc	r11
 85c:	a3 fc       	sbrc	r10, 3
 85e:	11 c0       	rjmp	.+34     	; 0x882 <__DATA_REGION_LENGTH__+0x82>
 860:	a0 fe       	sbrs	r10, 0
 862:	06 c0       	rjmp	.+12     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 864:	b2 14       	cp	r11, r2
 866:	88 f4       	brcc	.+34     	; 0x88a <__DATA_REGION_LENGTH__+0x8a>
 868:	28 0c       	add	r2, r8
 86a:	92 2c       	mov	r9, r2
 86c:	9b 18       	sub	r9, r11
 86e:	0e c0       	rjmp	.+28     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 870:	b2 14       	cp	r11, r2
 872:	60 f4       	brcc	.+24     	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 874:	b6 01       	movw	r22, r12
 876:	80 e2       	ldi	r24, 0x20	; 32
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 87e:	b3 94       	inc	r11
 880:	f7 cf       	rjmp	.-18     	; 0x870 <__DATA_REGION_LENGTH__+0x70>
 882:	b2 14       	cp	r11, r2
 884:	18 f4       	brcc	.+6      	; 0x88c <__DATA_REGION_LENGTH__+0x8c>
 886:	2b 18       	sub	r2, r11
 888:	02 c0       	rjmp	.+4      	; 0x88e <__DATA_REGION_LENGTH__+0x8e>
 88a:	98 2c       	mov	r9, r8
 88c:	21 2c       	mov	r2, r1
 88e:	a4 fe       	sbrs	r10, 4
 890:	10 c0       	rjmp	.+32     	; 0x8b2 <__DATA_REGION_LENGTH__+0xb2>
 892:	b6 01       	movw	r22, r12
 894:	80 e3       	ldi	r24, 0x30	; 48
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 89c:	a2 fe       	sbrs	r10, 2
 89e:	17 c0       	rjmp	.+46     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8a0:	a1 fc       	sbrc	r10, 1
 8a2:	03 c0       	rjmp	.+6      	; 0x8aa <__DATA_REGION_LENGTH__+0xaa>
 8a4:	88 e7       	ldi	r24, 0x78	; 120
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	02 c0       	rjmp	.+4      	; 0x8ae <__DATA_REGION_LENGTH__+0xae>
 8aa:	88 e5       	ldi	r24, 0x58	; 88
 8ac:	90 e0       	ldi	r25, 0x00	; 0
 8ae:	b6 01       	movw	r22, r12
 8b0:	0c c0       	rjmp	.+24     	; 0x8ca <__DATA_REGION_LENGTH__+0xca>
 8b2:	8a 2d       	mov	r24, r10
 8b4:	86 78       	andi	r24, 0x86	; 134
 8b6:	59 f0       	breq	.+22     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8b8:	a1 fe       	sbrs	r10, 1
 8ba:	02 c0       	rjmp	.+4      	; 0x8c0 <__DATA_REGION_LENGTH__+0xc0>
 8bc:	8b e2       	ldi	r24, 0x2B	; 43
 8be:	01 c0       	rjmp	.+2      	; 0x8c2 <__DATA_REGION_LENGTH__+0xc2>
 8c0:	80 e2       	ldi	r24, 0x20	; 32
 8c2:	a7 fc       	sbrc	r10, 7
 8c4:	8d e2       	ldi	r24, 0x2D	; 45
 8c6:	b6 01       	movw	r22, r12
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 8ce:	89 14       	cp	r8, r9
 8d0:	38 f4       	brcc	.+14     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8d2:	b6 01       	movw	r22, r12
 8d4:	80 e3       	ldi	r24, 0x30	; 48
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 8dc:	9a 94       	dec	r9
 8de:	f7 cf       	rjmp	.-18     	; 0x8ce <__DATA_REGION_LENGTH__+0xce>
 8e0:	8a 94       	dec	r8
 8e2:	f3 01       	movw	r30, r6
 8e4:	e8 0d       	add	r30, r8
 8e6:	f1 1d       	adc	r31, r1
 8e8:	80 81       	ld	r24, Z
 8ea:	b6 01       	movw	r22, r12
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 8f2:	81 10       	cpse	r8, r1
 8f4:	f5 cf       	rjmp	.-22     	; 0x8e0 <__DATA_REGION_LENGTH__+0xe0>
 8f6:	22 20       	and	r2, r2
 8f8:	09 f4       	brne	.+2      	; 0x8fc <__DATA_REGION_LENGTH__+0xfc>
 8fa:	42 ce       	rjmp	.-892    	; 0x580 <vfprintf+0x24>
 8fc:	b6 01       	movw	r22, r12
 8fe:	80 e2       	ldi	r24, 0x20	; 32
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	0e 94 a5 04 	call	0x94a	; 0x94a <fputc>
 906:	2a 94       	dec	r2
 908:	f6 cf       	rjmp	.-20     	; 0x8f6 <__DATA_REGION_LENGTH__+0xf6>
 90a:	f6 01       	movw	r30, r12
 90c:	86 81       	ldd	r24, Z+6	; 0x06
 90e:	97 81       	ldd	r25, Z+7	; 0x07
 910:	02 c0       	rjmp	.+4      	; 0x916 <__stack+0x17>
 912:	8f ef       	ldi	r24, 0xFF	; 255
 914:	9f ef       	ldi	r25, 0xFF	; 255
 916:	2b 96       	adiw	r28, 0x0b	; 11
 918:	e2 e1       	ldi	r30, 0x12	; 18
 91a:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__epilogue_restores__>

0000091e <strnlen_P>:
 91e:	fc 01       	movw	r30, r24
 920:	05 90       	lpm	r0, Z+
 922:	61 50       	subi	r22, 0x01	; 1
 924:	70 40       	sbci	r23, 0x00	; 0
 926:	01 10       	cpse	r0, r1
 928:	d8 f7       	brcc	.-10     	; 0x920 <strnlen_P+0x2>
 92a:	80 95       	com	r24
 92c:	90 95       	com	r25
 92e:	8e 0f       	add	r24, r30
 930:	9f 1f       	adc	r25, r31
 932:	08 95       	ret

00000934 <strnlen>:
 934:	fc 01       	movw	r30, r24
 936:	61 50       	subi	r22, 0x01	; 1
 938:	70 40       	sbci	r23, 0x00	; 0
 93a:	01 90       	ld	r0, Z+
 93c:	01 10       	cpse	r0, r1
 93e:	d8 f7       	brcc	.-10     	; 0x936 <strnlen+0x2>
 940:	80 95       	com	r24
 942:	90 95       	com	r25
 944:	8e 0f       	add	r24, r30
 946:	9f 1f       	adc	r25, r31
 948:	08 95       	ret

0000094a <fputc>:
 94a:	0f 93       	push	r16
 94c:	1f 93       	push	r17
 94e:	cf 93       	push	r28
 950:	df 93       	push	r29
 952:	fb 01       	movw	r30, r22
 954:	23 81       	ldd	r18, Z+3	; 0x03
 956:	21 fd       	sbrc	r18, 1
 958:	03 c0       	rjmp	.+6      	; 0x960 <fputc+0x16>
 95a:	8f ef       	ldi	r24, 0xFF	; 255
 95c:	9f ef       	ldi	r25, 0xFF	; 255
 95e:	2c c0       	rjmp	.+88     	; 0x9b8 <fputc+0x6e>
 960:	22 ff       	sbrs	r18, 2
 962:	16 c0       	rjmp	.+44     	; 0x990 <fputc+0x46>
 964:	46 81       	ldd	r20, Z+6	; 0x06
 966:	57 81       	ldd	r21, Z+7	; 0x07
 968:	24 81       	ldd	r18, Z+4	; 0x04
 96a:	35 81       	ldd	r19, Z+5	; 0x05
 96c:	42 17       	cp	r20, r18
 96e:	53 07       	cpc	r21, r19
 970:	44 f4       	brge	.+16     	; 0x982 <fputc+0x38>
 972:	a0 81       	ld	r26, Z
 974:	b1 81       	ldd	r27, Z+1	; 0x01
 976:	9d 01       	movw	r18, r26
 978:	2f 5f       	subi	r18, 0xFF	; 255
 97a:	3f 4f       	sbci	r19, 0xFF	; 255
 97c:	31 83       	std	Z+1, r19	; 0x01
 97e:	20 83       	st	Z, r18
 980:	8c 93       	st	X, r24
 982:	26 81       	ldd	r18, Z+6	; 0x06
 984:	37 81       	ldd	r19, Z+7	; 0x07
 986:	2f 5f       	subi	r18, 0xFF	; 255
 988:	3f 4f       	sbci	r19, 0xFF	; 255
 98a:	37 83       	std	Z+7, r19	; 0x07
 98c:	26 83       	std	Z+6, r18	; 0x06
 98e:	14 c0       	rjmp	.+40     	; 0x9b8 <fputc+0x6e>
 990:	8b 01       	movw	r16, r22
 992:	ec 01       	movw	r28, r24
 994:	fb 01       	movw	r30, r22
 996:	00 84       	ldd	r0, Z+8	; 0x08
 998:	f1 85       	ldd	r31, Z+9	; 0x09
 99a:	e0 2d       	mov	r30, r0
 99c:	09 95       	icall
 99e:	89 2b       	or	r24, r25
 9a0:	e1 f6       	brne	.-72     	; 0x95a <fputc+0x10>
 9a2:	d8 01       	movw	r26, r16
 9a4:	16 96       	adiw	r26, 0x06	; 6
 9a6:	8d 91       	ld	r24, X+
 9a8:	9c 91       	ld	r25, X
 9aa:	17 97       	sbiw	r26, 0x07	; 7
 9ac:	01 96       	adiw	r24, 0x01	; 1
 9ae:	17 96       	adiw	r26, 0x07	; 7
 9b0:	9c 93       	st	X, r25
 9b2:	8e 93       	st	-X, r24
 9b4:	16 97       	sbiw	r26, 0x06	; 6
 9b6:	ce 01       	movw	r24, r28
 9b8:	df 91       	pop	r29
 9ba:	cf 91       	pop	r28
 9bc:	1f 91       	pop	r17
 9be:	0f 91       	pop	r16
 9c0:	08 95       	ret

000009c2 <__ultoa_invert>:
 9c2:	fa 01       	movw	r30, r20
 9c4:	aa 27       	eor	r26, r26
 9c6:	28 30       	cpi	r18, 0x08	; 8
 9c8:	51 f1       	breq	.+84     	; 0xa1e <__ultoa_invert+0x5c>
 9ca:	20 31       	cpi	r18, 0x10	; 16
 9cc:	81 f1       	breq	.+96     	; 0xa2e <__ultoa_invert+0x6c>
 9ce:	e8 94       	clt
 9d0:	6f 93       	push	r22
 9d2:	6e 7f       	andi	r22, 0xFE	; 254
 9d4:	6e 5f       	subi	r22, 0xFE	; 254
 9d6:	7f 4f       	sbci	r23, 0xFF	; 255
 9d8:	8f 4f       	sbci	r24, 0xFF	; 255
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	af 4f       	sbci	r26, 0xFF	; 255
 9de:	b1 e0       	ldi	r27, 0x01	; 1
 9e0:	3e d0       	rcall	.+124    	; 0xa5e <__ultoa_invert+0x9c>
 9e2:	b4 e0       	ldi	r27, 0x04	; 4
 9e4:	3c d0       	rcall	.+120    	; 0xa5e <__ultoa_invert+0x9c>
 9e6:	67 0f       	add	r22, r23
 9e8:	78 1f       	adc	r23, r24
 9ea:	89 1f       	adc	r24, r25
 9ec:	9a 1f       	adc	r25, r26
 9ee:	a1 1d       	adc	r26, r1
 9f0:	68 0f       	add	r22, r24
 9f2:	79 1f       	adc	r23, r25
 9f4:	8a 1f       	adc	r24, r26
 9f6:	91 1d       	adc	r25, r1
 9f8:	a1 1d       	adc	r26, r1
 9fa:	6a 0f       	add	r22, r26
 9fc:	71 1d       	adc	r23, r1
 9fe:	81 1d       	adc	r24, r1
 a00:	91 1d       	adc	r25, r1
 a02:	a1 1d       	adc	r26, r1
 a04:	20 d0       	rcall	.+64     	; 0xa46 <__ultoa_invert+0x84>
 a06:	09 f4       	brne	.+2      	; 0xa0a <__ultoa_invert+0x48>
 a08:	68 94       	set
 a0a:	3f 91       	pop	r19
 a0c:	2a e0       	ldi	r18, 0x0A	; 10
 a0e:	26 9f       	mul	r18, r22
 a10:	11 24       	eor	r1, r1
 a12:	30 19       	sub	r19, r0
 a14:	30 5d       	subi	r19, 0xD0	; 208
 a16:	31 93       	st	Z+, r19
 a18:	de f6       	brtc	.-74     	; 0x9d0 <__ultoa_invert+0xe>
 a1a:	cf 01       	movw	r24, r30
 a1c:	08 95       	ret
 a1e:	46 2f       	mov	r20, r22
 a20:	47 70       	andi	r20, 0x07	; 7
 a22:	40 5d       	subi	r20, 0xD0	; 208
 a24:	41 93       	st	Z+, r20
 a26:	b3 e0       	ldi	r27, 0x03	; 3
 a28:	0f d0       	rcall	.+30     	; 0xa48 <__ultoa_invert+0x86>
 a2a:	c9 f7       	brne	.-14     	; 0xa1e <__ultoa_invert+0x5c>
 a2c:	f6 cf       	rjmp	.-20     	; 0xa1a <__ultoa_invert+0x58>
 a2e:	46 2f       	mov	r20, r22
 a30:	4f 70       	andi	r20, 0x0F	; 15
 a32:	40 5d       	subi	r20, 0xD0	; 208
 a34:	4a 33       	cpi	r20, 0x3A	; 58
 a36:	18 f0       	brcs	.+6      	; 0xa3e <__ultoa_invert+0x7c>
 a38:	49 5d       	subi	r20, 0xD9	; 217
 a3a:	31 fd       	sbrc	r19, 1
 a3c:	40 52       	subi	r20, 0x20	; 32
 a3e:	41 93       	st	Z+, r20
 a40:	02 d0       	rcall	.+4      	; 0xa46 <__ultoa_invert+0x84>
 a42:	a9 f7       	brne	.-22     	; 0xa2e <__ultoa_invert+0x6c>
 a44:	ea cf       	rjmp	.-44     	; 0xa1a <__ultoa_invert+0x58>
 a46:	b4 e0       	ldi	r27, 0x04	; 4
 a48:	a6 95       	lsr	r26
 a4a:	97 95       	ror	r25
 a4c:	87 95       	ror	r24
 a4e:	77 95       	ror	r23
 a50:	67 95       	ror	r22
 a52:	ba 95       	dec	r27
 a54:	c9 f7       	brne	.-14     	; 0xa48 <__ultoa_invert+0x86>
 a56:	00 97       	sbiw	r24, 0x00	; 0
 a58:	61 05       	cpc	r22, r1
 a5a:	71 05       	cpc	r23, r1
 a5c:	08 95       	ret
 a5e:	9b 01       	movw	r18, r22
 a60:	ac 01       	movw	r20, r24
 a62:	0a 2e       	mov	r0, r26
 a64:	06 94       	lsr	r0
 a66:	57 95       	ror	r21
 a68:	47 95       	ror	r20
 a6a:	37 95       	ror	r19
 a6c:	27 95       	ror	r18
 a6e:	ba 95       	dec	r27
 a70:	c9 f7       	brne	.-14     	; 0xa64 <__ultoa_invert+0xa2>
 a72:	62 0f       	add	r22, r18
 a74:	73 1f       	adc	r23, r19
 a76:	84 1f       	adc	r24, r20
 a78:	95 1f       	adc	r25, r21
 a7a:	a0 1d       	adc	r26, r0
 a7c:	08 95       	ret

00000a7e <__prologue_saves__>:
 a7e:	2f 92       	push	r2
 a80:	3f 92       	push	r3
 a82:	4f 92       	push	r4
 a84:	5f 92       	push	r5
 a86:	6f 92       	push	r6
 a88:	7f 92       	push	r7
 a8a:	8f 92       	push	r8
 a8c:	9f 92       	push	r9
 a8e:	af 92       	push	r10
 a90:	bf 92       	push	r11
 a92:	cf 92       	push	r12
 a94:	df 92       	push	r13
 a96:	ef 92       	push	r14
 a98:	ff 92       	push	r15
 a9a:	0f 93       	push	r16
 a9c:	1f 93       	push	r17
 a9e:	cf 93       	push	r28
 aa0:	df 93       	push	r29
 aa2:	cd b7       	in	r28, 0x3d	; 61
 aa4:	de b7       	in	r29, 0x3e	; 62
 aa6:	ca 1b       	sub	r28, r26
 aa8:	db 0b       	sbc	r29, r27
 aaa:	0f b6       	in	r0, 0x3f	; 63
 aac:	f8 94       	cli
 aae:	de bf       	out	0x3e, r29	; 62
 ab0:	0f be       	out	0x3f, r0	; 63
 ab2:	cd bf       	out	0x3d, r28	; 61
 ab4:	09 94       	ijmp

00000ab6 <__epilogue_restores__>:
 ab6:	2a 88       	ldd	r2, Y+18	; 0x12
 ab8:	39 88       	ldd	r3, Y+17	; 0x11
 aba:	48 88       	ldd	r4, Y+16	; 0x10
 abc:	5f 84       	ldd	r5, Y+15	; 0x0f
 abe:	6e 84       	ldd	r6, Y+14	; 0x0e
 ac0:	7d 84       	ldd	r7, Y+13	; 0x0d
 ac2:	8c 84       	ldd	r8, Y+12	; 0x0c
 ac4:	9b 84       	ldd	r9, Y+11	; 0x0b
 ac6:	aa 84       	ldd	r10, Y+10	; 0x0a
 ac8:	b9 84       	ldd	r11, Y+9	; 0x09
 aca:	c8 84       	ldd	r12, Y+8	; 0x08
 acc:	df 80       	ldd	r13, Y+7	; 0x07
 ace:	ee 80       	ldd	r14, Y+6	; 0x06
 ad0:	fd 80       	ldd	r15, Y+5	; 0x05
 ad2:	0c 81       	ldd	r16, Y+4	; 0x04
 ad4:	1b 81       	ldd	r17, Y+3	; 0x03
 ad6:	aa 81       	ldd	r26, Y+2	; 0x02
 ad8:	b9 81       	ldd	r27, Y+1	; 0x01
 ada:	ce 0f       	add	r28, r30
 adc:	d1 1d       	adc	r29, r1
 ade:	0f b6       	in	r0, 0x3f	; 63
 ae0:	f8 94       	cli
 ae2:	de bf       	out	0x3e, r29	; 62
 ae4:	0f be       	out	0x3f, r0	; 63
 ae6:	cd bf       	out	0x3d, r28	; 61
 ae8:	ed 01       	movw	r28, r26
 aea:	08 95       	ret

00000aec <_exit>:
 aec:	f8 94       	cli

00000aee <__stop_program>:
 aee:	ff cf       	rjmp	.-2      	; 0xaee <__stop_program>
